/**
 * TmonPlus Service Socket
 * 
 * @author  
 */

var sio = require('socket.io'),
    timers = require('timers'),
    redis = require('redis');

var CommonUtil = require('tmonplus/modules/commonUtil');
var CommonConstants = require('tmonplus/modules/commonConstants');
var SocketUtil = require('tmonplus/modules/socketUtil');
var Logger = require('tmonplus/modules/logger');

// Customer/Branch Info
var CustomerInfo = require('tmonplus/modules/customerInfo');
var BranchInfo = require('tmonplus/modules/branchInfo');

// Pub/Sub Message
var PubSubMessage = require('tmonplus/modules/pubsubMessage');

var branchDB = require('tmonplus/modules/branchDB');
var customerDB = require('tmonplus/modules/customerDB');
var smsUtil = require('tmonplus/modules/smsUtil');

var DELIMITER = '#tmonplus#';
var HASH_NAME = 'TMONPLUS';
var ENCRYPT_KEY = 'tnfdldksRotjwnrrkTekdltgld';
var TMONPLUS_VERSION = '20120820';

// Client Refresh Signal (forced)
process.on('SIGUSR1', function() {
    for (var key in io.sockets.sockets) {
        io.sockets.sockets[key].emit('REFRESH_TMONPLUS_SERVICE');
        console.log("---------------------------------------------------------------------------------------------------------------------");
        console.log((new Date()) + " ::: REFRESH_TMONPLUS_SERVICE (sockets.id : " + key + ")");
        console.log("---------------------------------------------------------------------------------------------------------------------");
    }
});

/**
 * Socket
 */
var TmonPlusSocket = module.exports = function() {
    this._phase = undefined;
    this._dbConfig = undefined;
    this._conf = undefined;
    this._logger = new Logger('TmonPlusSocket');
};

/**
 * Set deploy phase
 * 
 * @param {Object} phase
 */
TmonPlusSocket.prototype.setPhase = function(phase) {
    this._phase = phase;

    this._dbConfig = require('../../config/dbConfig');
    this._conf = require('../../config/setup');
    if (this._phase !== 'real') {
        var path = '../../config/' + this._phase + '/dbConfig';
        this._dbConfig = require('../../config/' + this._phase + '/dbConfig');
        this._conf = require('../../config/' + this._phase + '/setup');
    }
};

/**
 * Set Socket Server
 * 
 * @param {Object} server
 */
TmonPlusSocket.prototype.setServer = function(server) {
    this._server = server;
};


/**
 * Initialize Socket
 */
TmonPlusSocket.prototype.initSocket = function() {
    var self = this;
    
    var RedisStore = sio.RedisStore;
    io = sio.listen(this._server);

    io.configure(function(){
        io.set('log level', self._conf.logLevel);
        io.set('store', new RedisStore);
    });
    
    io.sockets.on('connection', function(socket) {

        var SESSION_NO = 0;
        var socketUtil;
        
        // Redis Channel
        var pubChannel;
        var subChannel;
        var SubKeyMonitor;
        
        var remoteIP = socket.remoteAddress;
        
        socketUtil = new SocketUtil(socket, TMONPLUS_VERSION);
        
        // 핸드폰 로그인한 사용자 정보
        var customerInfo = new CustomerInfo();
        var branchInfo = new BranchInfo();
        
        // subscriber 생성
        var subscriber = redis.createClient(6379, self._conf.redisHost);
        var publisher = redis.createClient(6379, self._conf.redisHost); 
        
        // 접속 여부
        var connected = false;
        var timeoutClientChannelCheck = null;
        var isClientChannelChecking = false;

        var branchQuery = new branchDB(self._dbConfig);
        var customerQuery = new customerDB(self._dbConfig);
        var sms = new smsUtil(self._dbConfig);
        
        // 인증 번호
        var pinNumber = '';
        var pinSerial = '';
        
        var pinGenerate = function(bNewPin) {
            var p = ('0000' + Math.floor(Math.random() * 10000));
            p = p.substring(p.length - 4);

            var message = '[' + branchInfo.getBasicInfo()['branchName'] + '] 포인트 사용을 위해 인증번호 [' + p + '] 를 입력해주세요';
            sms.sendSMS(customerInfo.getBasicInfo().customerPhone, '15661135', null, message, 'now', 'sms', (customerInfo.getReceptionRefusalInfo()['sms'] > 0), {"branchNo": branchInfo.getBasicInfo()['branchNo'], "contentsType": (bNewPin ? "NEW_PIN" : "PIN"), "triggerInfo": customerInfo.getBasicInfo().customerPhone});
                    
            return p;
        };
        
        /**
         * Lookup Redis Hash
         * 
         * @param {Object} hashKey
         * @param {Object} callback
         */
        var lookupRedisHash = function(hashKey, callback) {
            publisher.hexists(CommonConstants.HASH_NAME, hashKey, function(err, reply) {
                if (reply == 1) {
                    publisher.hget(CommonConstants.HASH_NAME, hashKey, function(err, value) {
                        callback(value == SESSION_NO);
                    });
                } else {
                    SESSION_NO = Math.random() * 1000000000;
                    callback(true);
                }
            });
        };
        
        /**
         * Lookup Redis Hash
         * 
         * @param {Object} hashKey
         * @param {Object} callback
         */
        var lookupRedisHashKey = function(hashKey, callback) {
            publisher.hexists(CommonConstants.HASH_NAME, hashKey, function(err, reply) {
                callback(reply);
            });
        };
        
        /**
         * Message 전달 Processing
         * 상대 디바이스에게 메시지 전달이 필요한 경우 상대 디바이스 접속여부를 먼저 체크한다.
         * 
         * @param {Object} callback
         */
        var processSendMessage = function(callback) {
            lookupRedisHashKey(pubChannel, function(reply) {
                callback();
            });
        };
        
        /**
         * 
         */
        var takeSocketOwnership = function() {
            subscriber.unsubscribe();
            publisher.hdel(CommonConstants.HASH_NAME, subChannel);
            //console.log('takeSocketOwnership::hdel.' + subChannel);
            
            socket.emit('reinitClientChannel');
        };

        /**
         * 
         */
        var closeSocket = function() {
            subscriber.unsubscribe();
            subscriber.end();
            publisher.end();

            branchQuery.endBranchDB(function() {
                self._logger.log('INFO', 'BranchDB end', '(' + subChannel + ')');
            });
            
            customerQuery.endCustomerDB(function() {
                self._logger.log('INFO', 'CustomerDB end', '(' + subChannel + ')');
            });

            sms.endSmsUtil(function() {
                self._logger.log('INFO', 'SmsUtil end', '(' + subChannel + ')');
            });            

			socket.disconnect();
        };                  

        /**
         * Customer 개인 정보제공 동의 함수
         * 
         * @param {Object} pCustomerLoginData
         */
        var customerAgreeTerms = function(pCustomerLoginData) {
            processSendMessage(function() {
                var splitedSessionId = pCustomerLoginData.sessionId.split(CommonConstants.DELIMITER);
                
                var branchNo = splitedSessionId[0];
                var branchId = splitedSessionId[1];
                
                var customerPhone = pCustomerLoginData.customerPhone;
                
                var customerLoginData = {
                    'branchNo' : branchNo,
                    'customerPhone' : customerPhone
                };
    
                customerQuery.processSignUp(customerPhone, function(result) {
                    if (result && result.resultCode === 'SUCCESS') {
                        customerInfo.signUp({customerNo: result.customerNo, customerPhone: customerPhone}, branchInfo.getBenefitUseCondition(), branchInfo.getGradeInfo());
    
                        if (pCustomerLoginData.target == 'self') {
                            // customer login success emit
                            socketUtil.emit('customerLoginSuccess', customerInfo.getObject(true));
                            
                            // publish customer information
                            var pubsubMessage = new PubSubMessage();
                            pubsubMessage.initializeProperties('customerLoginSuccess', customerInfo.getObject(true));
                            publisher.publish(pubChannel, pubsubMessage.getSerializedMessage());
                        } else {
                            customerQuery.processGiveBenefit(branchInfo.getPolicyInfo(), pCustomerLoginData.paymentId, customerInfo, branchInfo, function(result) {
                                if (result && result.resultCode === 'SUCCESS') {
                                    socketUtil.emit('customerLoginSuccessNewComingFriend', {
                                        customerInfo: customerInfo.getObject(true),
                                        friendSavingPoint: branchInfo.getPolicyInfo().friendSavingPoint
                                    });
                                } else {
                                    self._logger.log('ERROR', 'Fail processGiveBenefit');
                                    self._logger.log('ERROR', JSON.stringify(pCustomerLoginData), ' pCustomerLoginData');
                                    
                                    socketUtil.emit('customerLoginFailNewComingFriend');
                                }
                                
                                // publish customer information
                                var pubsubMessage = new PubSubMessage();
                                pubsubMessage.initializeProperties('customerFriendSavingSuccess');
                                publisher.publish(pubChannel, pubsubMessage.getSerializedMessage());
                            });
                        }
                    } else {
                        self._logger.log('ERROR', 'Fail processSignUp');
                        self._logger.log('ERROR', JSON.stringify(pCustomerLoginData), ' pCustomerLoginData');
                        
                        // 에러
                        socketUtil.emit('customerLoginFail');
                    }
                });
            });
        }

        /**
         * 
         * @param {Object} pSessionInfo
         *                  { sessionId : 'adifadkfasdf', deviceId : 'device1', branchNo : 'branchNo' }
         */
        socketUtil.on('clientDeviceConnect', function(pSessionInfo) {
            if (CommonUtil.validateSessionInfo(pSessionInfo, remoteIP)) {
                socketUtil.emit('clientDeviceConnect');
            } else {
                socketUtil.emit('invalidClientDevice');
            }
        });
        
        /**
         * 가맹점 device 로그인 요청
         * 
         * @param {Object} pDeviceLoginInfo
         *                  { id : 'tmon', password : '1234' }
         */
        socketUtil.on('clientDeviceLoginRequest', function(pDeviceLoginInfo) {
            branchQuery.checkBranchDevice(pDeviceLoginInfo, function(resultCode, branchNo) {
                if (resultCode === 'SUCCESS') {
                    var deviceId = pDeviceLoginInfo.id
                    var sessionId = CommonUtil.encryptText(deviceId + CommonConstants.DELIMITER + branchNo + CommonConstants.DELIMITER + remoteIP)
                    var pSessionInfo = {
                        sessionId : sessionId,
                        deviceId : deviceId,
                        branchNo : branchNo
                    };
                    
                    socketUtil.emit('clientDeviceLoginSuccess', pSessionInfo);
                } else {
                    self._logger.log('ERROR', 'Fail checkBranchDevice');
                    self._logger.log('ERROR', JSON.stringify(pDeviceLoginInfo), ' pDeviceLoginInfo');        
                    
                    socketUtil.emit('clientDeviceLoginFail');
                }
            });
        });
                
        /**
         * 접속한 클라이언트의 구독채널 설정
         *  
         * @param {Object} pSubscribeInfo 접속한 클라이언트가 pub/sub을 원하는 채널정보
         *          ex : { 'pubType':'customer', 'subType':'cashier', 'branchNo':1, deviceId:'ticketmonster', version:'20120820' }
         */
        socketUtil.on('initClientChannel', function(pSubscribeInfo) {
            var pubType = pSubscribeInfo.pubType;
            var subType = pSubscribeInfo.subType;
            var branchNo = pSubscribeInfo.branchNo;
            var deviceId = pSubscribeInfo.deviceId;
            
            socketUtil.setDevice(subType, deviceId);
            
            // channel 설정
            pubChannel = pubType + CommonConstants.DELIMITER + deviceId;
            subChannel = subType + CommonConstants.DELIMITER + deviceId;
            // redis key for monitor
            subKeyMonitor = subType + CommonConstants.DELIMITER_MONITOR + deviceId;
            
            lookupRedisHash(subChannel, function(reply) {
                if (!reply) {
                    socketUtil.emit('checkClientChannel');
                    isClientChannelChecking = true;
                    
                    clearTimeout(timeoutClientChannelCheck);
                    timeoutClientChannelCheck = timers.setTimeout(takeSocketOwnership, 10000);
                    
                    subscriber.subscribe(pubChannel); // subscribe via pub channel, not sub channel, in order to fake as its counter-part     
                    
                    var pubsubMessage = new PubSubMessage();
                    pubsubMessage.initializeProperties('requestClientChannelCheck', SESSION_NO);
                    publisher.publish(subChannel, pubsubMessage.getSerializedMessage()); // publish via sub channel, not pub channel, in order to fake as its counter-part
                                         
                    return;
                }
                
                branchQuery.inquiryBranchInfo(branchNo, function(result) {
                    if (result && result.RESULT_CODE === 'SUCCESS') {
                        // Branch Info 초기화
                        branchInfo.initialize(result);
                        
                        // subscribe 시작                        
                        subscriber.subscribe(subChannel);
                        publisher.hset(CommonConstants.HASH_NAME, subChannel, SESSION_NO);
                        
                        connected = true;
                        
                        socketUtil.emit('initClientChannel', branchInfo.getObject());
                    } else {
                        self._logger.log('ERROR', 'Fail inquiryBranchInfo');
                        self._logger.log('ERROR', JSON.stringify(pSubscribeInfo), ' pSubscribeInfo');                        
                        
                        socketUtil.emit('initClientChannelFail');
                    }
                });
            });
        });
        
        /**
         * Branch 최근 적립내역 조회
         * 
         * @param {Object} pSearchCondition
         *          ex : { branchNo : 1, start : 20, limit : 20 }
         */
        socketUtil.on('branchPaymentTransaction', function(pSearchCondition) {
            branchQuery.inquiryPaymentTransactionCount(pSearchCondition.branchNo, function(resultCode, paymentListCount) {
                if (resultCode === "SUCCESS") {
                    branchQuery.inquiryPaymentTransactionInfo(pSearchCondition.branchNo, pSearchCondition.start, pSearchCondition.limit, function(results) {
                        if (results.resultCode === "SUCCESS") {
                            results.payTransListCount = paymentListCount;
                            socketUtil.emit('branchPaymentTransaction', results);
                        } else {
                            self._logger.log('ERROR', 'Fail inquiryPaymentTransactionInfo');
                            self._logger.log('ERROR', JSON.stringify(pSearchCondition), ' pSearchCondition');
                            
                            socketUtil.emit('branchPaymentTransactionFail');
                        }
                    });
                } else {
                    self._logger.log('ERROR', 'Fail inquiryPaymentTransactionCount');
                    self._logger.log('ERROR', JSON.stringify(pSearchCondition), ' pSearchCondition');
                    
                    socketUtil.emit('branchPaymentTransactionFail');
                }
            });
            
            
        });
        
        /**
         * Branch 최근 적립내역 조회 Append
         * 
         * @param {Object} pSearchCondition 적립내역 조회조건
         *          ex : { branchNo : 1, start : 20, limit : 20 }
         */
        socketUtil.on('branchPaymentTransactionAppend', function(pSearchCondition) {
            branchQuery.inquiryPaymentTransactionInfo(pSearchCondition.branchNo, pSearchCondition.start, pSearchCondition.limit, function(results) {
                if (results && results.resultCode === "SUCCESS") {
                    socketUtil.emit('branchPaymentTransactionAppend', results);
                } else {
                    self._logger.log('ERROR', 'Fail inquiryPaymentTransactionInfo for append');
                    self._logger.log('ERROR', JSON.stringify(pSearchCondition), ' pSearchCondition');
                    
                    socketUtil.emit('branchPaymentTransactionAppendFail');
                }
            });
        });
        
        /**
         * Customer 핸드폰 로그인 요청
         * 
         * @param {Object} pCustomerLoginData 요청한 로그인 정보
         *          ex : { 'sessionId':'BRANCH_NO#june#DEVICE_ID', 'customerPhone':'01012345786' }
         */
        socketUtil.on('customerLoginRequest', function(pCustomerLoginData) {
            processSendMessage(function() {
                var customerPhone = pCustomerLoginData.customerPhone;
                    
                var customerLoginData = {
                    'branchNo' : branchInfo.getBasicInfo()['branchNo'],
                    'customerPhone' : customerPhone
                };
                
                // Customer login
                customerQuery.inquiryCustomerInfo(customerLoginData, function(result) {
                    if (result && result.RESULT_CODE === 'SUCCESS') {
                        // Customer Info 초기화
                        customerInfo.initialize(result, branchInfo.getBenefitUseCondition(), branchInfo.getGradeInfo());
                        
                        if (pCustomerLoginData.target == 'self') {
                            // publish customer information
                            var pubsubMessage = new PubSubMessage();
                            pubsubMessage.initializeProperties('customerLoginSuccess', customerInfo.getObject(true));
                            publisher.publish(pubChannel, pubsubMessage.getSerializedMessage());
                        }
    
                        // Emit customer login success
                        socketUtil.emit('customerLoginSuccess', customerInfo.getObject(true));
                    } else if (result && result.RESULT_CODE === 'NONMEMBER') {
                        //customerInfo.signUp({customerNo: -1, customerPhone: customerPhone}, branchInfo.getBenefitUseCondition(), branchInfo.getGradeInfo());

                        // publish customer information
                        var pubsubMessage = new PubSubMessage();

                        if (pCustomerLoginData.target == 'self') {
							/*
                            pubsubMessage.initializeProperties('customerLoginRequest', customerInfo.getObject(true));
                            publisher.publish(pubChannel, pubsubMessage.getSerializedMessage());
							*/
                        } else {
                            pubsubMessage.initializeProperties('customerFriendSaving', 'privacy_agreement');
                            publisher.publish(pubChannel, pubsubMessage.getSerializedMessage());                        
                        }
                        
                        //socketUtil.emit('customerAgreeTermsRequest');

						customerAgreeTerms(pCustomerLoginData);
                    } else {
                        self._logger.log('ERROR', 'Fail inquiryCustomerInfo');
                        self._logger.log('ERROR', JSON.stringify(pCustomerLoginData), ' pCustomerLoginData');
                        
                        // 에러
                        socketUtil.emit('customerLoginFail');
                    }
                });
            });
        });
        
        /**
         * 자동적립중단을 위한 고객 태블릿 액션을 전달
         * 
         */
        socketUtil.on('customerFriendSaving', function(type) {
            processSendMessage(function() {
                // publish customer information
                var pubsubMessage = new PubSubMessage();
                pubsubMessage.initializeProperties('customerFriendSaving', type);
                publisher.publish(pubChannel, pubsubMessage.getSerializedMessage());
            });
        });
        
        /**
         * Customer 개인 정보제공 동의취소
         * 
         * @param {Object} pCustomerLoginData
         */
        socketUtil.on('cancelCustomerAgreeTerms', function(customerPhone) {
            customerQuery.cancelSignUp(customerPhone, function(result) {
                if (result.resultCode === 'SUCCESS') {
                    //console.log('success.cancelSignUp');
                    //console.log(customerLoginData);
                } else {
                    // 에러
                    //console.log('fail.cancelSignUp');
                    //console.log(customerLoginData);
                }
            });
        });
        
        /**
         * Cashier 비밀번호 입력창 노출 요청
         */
        socketUtil.on('cashierInputPasswordLayerRequest', function(pUsePoint) {
            processSendMessage(function() {
                if (pUsePoint > customerInfo.getSummary().totalUsablePoint) {
                    socketUtil.emit('cashierUseExceededAmount', customerInfo.getSummary().totalUsablePoint);
                } else if (pUsePoint > 0 && pUsePoint < branchInfo.getBenefitUseCondition().useMinimumAmount) {
                    socketUtil.emit('cashierUseMinimumAmount', branchInfo.getBenefitUseCondition().useMinimumAmount);
                } else if (branchInfo.getBenefitUseCondition().useEachAmount > 0 && pUsePoint % branchInfo.getBenefitUseCondition().useEachAmount != 0) {
                    socketUtil.emit('cashierUseEachAmount', branchInfo.getBenefitUseCondition().useEachAmount);
                } else {
                    var pinInfo = {
                        pinNumber: pUsePoint > 0 ? pinGenerate(false) : null,
                        usePoint: pUsePoint
                    };
                
                    var pubsubMessage = new PubSubMessage();
                    pubsubMessage.initializeProperties('cashierInputPinLayerRequest', pinInfo);
                    publisher.publish(pubChannel, pubsubMessage.getSerializedMessage());
                }
            });
        });
        
        /**
         * Customer 새로운 비밀번호 요청
         */
        socketUtil.on('customerNewPasswordRequest', function(pUsePoint, pMessage) {
            pinNumber = pinGenerate(true);
            socketUtil.emit('customerNewPassword');
        });
        
        /**
         * 캐쉬어 적립중단 요청
         * 
         * @param {Object} pCustomerPassword
         */
        socketUtil.on('cashierStopSaving', function() {
            processSendMessage(function() {
                var pubsubMessage = new PubSubMessage();
                pubsubMessage.initializeProperties('cashierStopSaving');
                publisher.publish(pubChannel, pubsubMessage.getSerializedMessage());
    
                socketUtil.emit('cashierStopSaving');
            });
        });
        
        /**
         * 캐쉬어 강제리프레쉬 요청
         * 
         * @param {Object} pCustomerPassword
         */
        socketUtil.on('cashierRefresh', function() {
            processSendMessage(function() {
                var pubsubMessage = new PubSubMessage();
                pubsubMessage.initializeProperties('cashierRefresh');
                publisher.publish(pubChannel, pubsubMessage.getSerializedMessage());
    
                socketUtil.emit('cashierRefresh');
            });
        });

        /**
         * 고객 적립중단 요청
         * 
         * @param {Object} pCustomerPassword
         */
        socketUtil.on('customerStopSaving', function() {
            processSendMessage(function() {
                var pubsubMessage = new PubSubMessage();
                pubsubMessage.initializeProperties('customerStopSaving');
                publisher.publish(pubChannel, pubsubMessage.getSerializedMessage());
    
                socketUtil.emit('customerStopSaving');
            });
        });
        /**
         * Customer 비밀번호 입력요청
         * 
         * @param {Object} pCustomerPassword
         */
        socketUtil.on('customerInputPasswordRequest', function(pPinCheckInfo) {
            processSendMessage(function() {
                if (pPinCheckInfo && (pinNumber === pPinCheckInfo.customerPassword || (pinNumber === '' && pinSerial === CommonUtil.encryptText('pin.' + pPinCheckInfo.customerPassword)))) {
                    var pubsubMessage = new PubSubMessage();
                    pubsubMessage.initializeProperties('customerVerifySuccess');
                    publisher.publish(pubChannel, pubsubMessage.getSerializedMessage());

                    socketUtil.emit('customerVerifySuccess');
                } else {
                    var pubsubMessage = new PubSubMessage();
                    pubsubMessage.initializeProperties('customerVerifyFail');
                    publisher.publish(pubChannel, pubsubMessage.getSerializedMessage());

                    socketUtil.emit('customerVerifyFail');
                }
            });
            /*
            customerQuery.verifyCustomerPassword(customerInfo.getBasicInfo()['customerNo'], pCustomerPassword, function(resultCode) {
                if (resultCode === 'SUCCESS') {
                    var pubsubMessage = new PubSubMessage();
                    pubsubMessage.initializeProperties('customerVerifySuccess', {});
                    publisher.publish(pubChannel, pubsubMessage.getSerializedMessage());
                    
                    socketUtil.emit('customerVerifySuccess');
                } else {
                    socketUtil.emit('customerVerifyFail');
                }
            });
            */
        });
        
        /**
         * Cashier 주문금액 입력요청
         * 
         * @param {Object} pPaymentAndBenefitInfo
         *                          orderPrice : 주문금액
         *                          useBenefits : 사용한 혜택정보
         *                              [
         *                                  {branchCustomerBenefitNo : '', type : 'SAVING', unit : 'POINT', amount : 1000},
         *                                  {branchCustomerBenefitNo : '3', type : 'COUPON', unit : 'POINT', amount : 3000}
         *                              ]
         */
        socketUtil.on('cashierInputPayAndBenefitRequest', function(pPaymentAndBenefitInfo) {
            processSendMessage(function() {
                var paymentAndBenefitInfo = pPaymentAndBenefitInfo;
                
                // 최종 결제금액 입력 및 혜택 사용처리
                var resultUse = customerInfo.processUse(paymentAndBenefitInfo, branchInfo.getBenefitUseCondition());
    
                paymentAndBenefitInfo.paymentPrice = Math.max(0, paymentAndBenefitInfo.orderPrice - resultUse.totalUseSavePoint - resultUse.totalUseBenefit);
                
                // 포인트 적립처리
                paymentAndBenefitInfo.savingPoint = customerInfo.processSaving(paymentAndBenefitInfo.paymentPrice, branchInfo.getBenefitGiveCondition());
                
                var customerGrade = branchInfo.processGradeChange(customerInfo, paymentAndBenefitInfo.paymentPrice);
                customerInfo.setPromotionGrade(customerGrade);
                
                paymentAndBenefitInfo.targetPromotion = branchInfo.processPromotion(customerInfo, paymentAndBenefitInfo.paymentPrice);
                
                // DB 반영
                customerQuery.processPaymentAndUseBenefit(paymentAndBenefitInfo, customerInfo, branchInfo, function(result) {
                    if (result && result.resultCode === 'SUCCESS') {
                        var paymentAndBenefitResultInfo = result.paymentAndBenefitInfo;
                        paymentAndBenefitResultInfo.resultType = 'saving';
                        paymentAndBenefitResultInfo.paymentId = result.paymentId;
                        
                        if (customerInfo.getGradeInfo().currentGradeLevel == 0 && customerInfo.getGradeInfo().gradeLevel == 1) {
                            paymentAndBenefitResultInfo.resultType = 'thankyou';
                        } else if (customerInfo.getGradeInfo().currentGradeLevel < customerInfo.getGradeInfo().gradeLevel && customerInfo.getGradeInfo().gradeLevel > 1) {
                            paymentAndBenefitResultInfo.resultType = 'levelup';
                        }
                        
                        if (paymentAndBenefitResultInfo.targetPromotion != null) {
                            var _customerName = customerInfo.getBasicInfo().customerPhone.substr(customerInfo.getBasicInfo().customerPhone.length - 4);                    
                            var _customerGrade = customerInfo.getGradeInfo().gradeName;
                            var _totalGivenPoint = new Number(customerInfo.getSummary().totalGivenPoint) + new Number(paymentAndBenefitResultInfo.savingPoint.savingAmount);
    
                            for (var i = 0, n = paymentAndBenefitResultInfo.targetPromotion.length; i < n; i++) {
                                if (paymentAndBenefitResultInfo.targetPromotion[i].packageDescription != null) {
                                    var message = '[' + branchInfo.getBasicInfo()['branchName'] + '] ' +
                                        paymentAndBenefitResultInfo.targetPromotion[i].packageDescription
                                            .replace(/\[:customerName:\]/g, _customerName)
                                            .replace(/\[:customerGrade:\]/g, _customerGrade)
                                            .replace(/\[:totalGivenPoint:\]/g, CommonUtil.formatCurrency(_totalGivenPoint));
        
                                    var index = 1;
                                                                    
                                    var benefitMessage = '';
                                    
                                    for (var key in paymentAndBenefitResultInfo.targetPromotion[i].benefit) {
                                        var item = paymentAndBenefitResultInfo.targetPromotion[i].benefit[key];
                                        
                                        var strExpireDate = new Date(item.expireDate);
                                        strExpireDate = CommonUtil.getExpireDate(item.expireType, item.expireAmount, strExpireDate);
                                        strExpireDate = CommonUtil.toExpireDateString(strExpireDate);
                                        
                                        if (result.targetBenefitLength[paymentAndBenefitResultInfo.targetPromotion[i].packageNo] > 1) {
                                            benefitMessage += '쿠폰(' + (index) + ')\n';
                                        }
                                        
                                        benefitMessage += '━━━━━━━━━━━\n';
                                        benefitMessage += item.resource + '\n';
                                        benefitMessage += '━━━━━━━━━━━\n';
                                        benefitMessage += '- 인증번호' + CommonUtil.encodeToCouponCode(item.branchCustomerBenefitNo, 10) + '\n';
                                        benefitMessage += '- ' + (strExpireDate === '' ? '유효기간없음\n' : strExpireDate + '까지\n');
                                        if (item.useCondition) {
                                            benefitMessage += '- ' + item.useCondition + '\n'; 
                                        }
                                        
                                        if (index++ < result.targetBenefitLength[paymentAndBenefitResultInfo.targetPromotion[i].packageNo]) {
                                            benefitMessage += '\n';
                                        }
                                    }
                                    
                                    message = message.replace('[:branchBenefits:]', benefitMessage);
                                    message += '\n\n혜택거부0808000264\n티몬플러스에서 알려드립니다';

                                    sms.sendSMS(customerInfo.getBasicInfo().customerPhone, '15661135', branchInfo.getBasicInfo()['branchName'], message, 'now', 'lms', (customerInfo.getReceptionRefusalInfo()['sms'] > 0), {"branchNo": branchInfo.getBasicInfo()['branchNo'], "contentsType": "AUTO_PROMOTION", "triggerInfo": paymentAndBenefitResultInfo.targetPromotion[i].packageNo});
                                    
                                    branchQuery.insertBenefitPackageGiveLog(paymentAndBenefitResultInfo.targetPromotion[i].packageNo);
                                }
                            }
                        }
                        
                        socketUtil.emit('customerProcessDone', {
                            customerInfo: customerInfo.getObject(true),
                            paymentAndBenefitInfo: paymentAndBenefitResultInfo
                        });
    
                        var pubsubMessage = new PubSubMessage();
                        
                        pubsubMessage.initializeProperties('customerProcessDone', {
                            customerInfo: customerInfo.getObject(false),
                            paymentAndBenefitInfo: paymentAndBenefitInfo
                        });
                        
                        publisher.publish(pubChannel, pubsubMessage.getSerializedMessage());
                    } else {
                        self._logger.log('ERROR', 'Fail processPaymentAndUseBenefit');
                        self._logger.log('ERROR', JSON.stringify(paymentAndBenefitInfo), ' paymentAndBenefitInfo');
                        self._logger.log('ERROR', JSON.stringify(customerInfo), ' customerInfo');
                        self._logger.log('ERROR', JSON.stringify(branchInfo), ' branchInfo');
                    }
                });
            });
        });
        
        /**
         * Cashier 고객메모
         * 
         * @param {Object} pCustomerMemoInfo
         *                          sex : 성별
         *                          age : 연령대
         *                          visitType : 방문타입
         */
        socketUtil.on('cashierInputCustomerMemo', function(pCustomerMemoInfo, paymentId) {
            // DB 반영
            customerQuery.processCustomerMemo(pCustomerMemoInfo, paymentId, function(result) {
               socketUtil.emit('cashierInputCustomerMemoDone');
            });
        });
        
        /**
         * 
         * @param {Object} pBranchCustomerPaymentNo
         */
        socketUtil.on('paymentTransactionCancelRequest', function(pBranchCustomerPaymentNo) {
            branchQuery.rollbackPaymentTransaction(pBranchCustomerPaymentNo, branchInfo.getBasicInfo().branchNo, function(result){
                if (result && result.RESULT_CODE === 'SUCCESS') {
                    var message = '[' + branchInfo.getBasicInfo()['branchName'] + '] ' + 
                        result.PAYMENT_INFO.customerPhone.substr(result.PAYMENT_INFO.customerPhone.length - 4) + '님, ' + 
                        CommonUtil.toDateMinuteString(result.PAYMENT_INFO.createDatetime).substr(5) + ' 적립하신 내역이 취소되었습니다';

                    sms.sendSMS(result.PAYMENT_INFO.customerPhone, '15661135', null, message, 'now', 'sms', (customerInfo.getReceptionRefusalInfo()['sms'] > 0), {"branchNo": branchInfo.getBasicInfo()['branchNo'], "contentsType": "PAY_CANCEL", "triggerInfo": pBranchCustomerPaymentNo});
                        
                    socketUtil.emit('paymentTransactionCancel');
                } else {
                    self._logger.log('ERROR', 'Fail rollbackPaymentTransaction', ' (pBranchCustomerPaymentNo : ' + pBranchCustomerPaymentNo + ', branchNo : ' + branchInfo.getBasicInfo().branchNo + ')');
                    
                    socketUtil.emit('paymentTransactionCancelFail');
                }
            });
        });
        
        /**
         * 
         * @param {Object} pClientInfo
         */
        socketUtil.on('clientDeviceReconnect', function(pClientInfo, pDeviceSessionInfo) {
            if (CommonUtil.validateSessionInfo(pDeviceSessionInfo, remoteIP)) {
                var pubType = pDeviceSessionInfo.pubType;
                var subType = pDeviceSessionInfo.subType;
                var deviceId = pDeviceSessionInfo.deviceId;
                
                // channel 설정
                pubChannel = pubType + CommonConstants.DELIMITER + deviceId;
                subChannel = subType + CommonConstants.DELIMITER + deviceId;
				// redis key for monitor
				subKeyMonitor = subType + CommonConstants.DELIMITER_MONITOR + deviceId;
                
                socketUtil.setDevice(subType, deviceId);
                
                lookupRedisHash(subChannel, function(reply) {
                    if (!reply) {
                        SESSION_NO = Math.random() * 100000000;
                        publisher.hset(CommonConstants.HASH_NAME, subChannel, SESSION_NO);
                    }
                    
                    if (!customerInfo.initialized()) customerInfo.initializeFrom(pClientInfo.customerInfo);
                    if (!branchInfo.initialized()) branchInfo.initializeFrom(pClientInfo.branchInfo);
                    pinSerial = pClientInfo.pinSerial;
                    
                    // subscribe 시작
                    subscriber.subscribe(subChannel);
                    publisher.hset(CommonConstants.HASH_NAME, subChannel, SESSION_NO);
                    
                    connected = true;
                    
                    socketUtil.emit('clientDeviceReconnect');
                });
            } else {
                self._logger.log('ERROR', 'Fail clientDeviceReconnect');
                self._logger.log('ERROR', JSON.stringify(pClientInfo), ' pClientInfo');
                self._logger.log('ERROR', JSON.stringify(pDeviceSessionInfo), ' pDeviceSessionInfo');
                
                socketUtil.emit('invalidClientDevice');
            }
        });
        
        /**
         * subscriber 메시지 받을 경우 처리
         * 
         * @param {Object} channel
         * @param {Object} message
         */
        subscriber.on('message', function(channel, message) {
            var pubsubMessage = new PubSubMessage();
            pubsubMessage.initializeFromText(message);

            var messageTitle = pubsubMessage.getObjectMessage()['title'];
            
            if (messageTitle === 'customerLoginSuccess') { // 고객 로그인 요청일 경우 customerInfo 초기화
                customerInfo.initializeFrom(pubsubMessage.getObjectMessage()['content']);
            } else if (messageTitle === 'cashierInputPinLayerRequest') { 
                pinNumber = pubsubMessage.getObjectMessage()['content']['pinNumber'];
                pubsubMessage.getObjectMessage()['content']['pinNumber'] = CommonUtil.encryptText('pin.' + pinNumber);
            } 
            
            if (messageTitle === 'requestClientChannelCheck') {
                var pubsubMessage = new PubSubMessage();
                pubsubMessage.initializeProperties('responseClientChannelCheck', pubsubMessage.getObjectMessage()['content']);
                publisher.publish(pubChannel, pubsubMessage.getSerializedMessage());                    
            } else if (messageTitle === 'responseClientChannelCheck') {
                if (isClientChannelChecking) {
                    clearTimeout(timeoutClientChannelCheck);
                    isClientChannelChecking = false;
                    socketUtil.emit('duplicateClientChannel');
                }
            } else {
                socketUtil.emit(pubsubMessage.getObjectMessage()['title'], pubsubMessage.getObjectMessage()['content']);    
            }
        });
       
        /**
         * proxy for ACK
         */
        socketUtil.on('socketUtil', function(obj) {
            processSendMessage(function() {
                var pubsubMessage = new PubSubMessage();
                pubsubMessage.initializeProperties('socketUtil', obj);
                publisher.publish(pubChannel, pubsubMessage.getSerializedMessage());
            });
        });

        /**
         * proxy for ACK
         */
        socketUtil.on('socketUtil.ACK', function(obj) {
            processSendMessage(function() {
                var pubsubMessage = new PubSubMessage();
                pubsubMessage.initializeProperties('socketUtil.ACK', obj);
                publisher.publish(pubChannel, pubsubMessage.getSerializedMessage());
            });
        });
        
        /**
         * socket 접속 종료
         */
        socketUtil.on('disconnect', function() {
            var timeoutCloseSocket = timers.setTimeout(closeSocket, 5000);
            
            if (connected) {
                publisher.hget(CommonConstants.HASH_NAME, subChannel, function(err, value) {
                    if (value == SESSION_NO) {
                        publisher.hdel(CommonConstants.HASH_NAME, subChannel);
                    }
                    
                    timers.clearTimeout(timeoutCloseSocket);
                    closeSocket();
                });
            }
        });

        /**
         * service monitoring on cashier & customer's devices
         * 
		 * @param
         */
		socketUtil.on('serviceMonitoring', function(trigger_key) {
			//socket.join('monitor');

			branchQuery.inquiryBranchDevice(function(resultCode, results) {
				if (resultCode === 'SUCCESS')
				{
            		//monitorChannel = 'monitor' + CommonConstants.DELIMITER + deviceId;
					var deviceCashierInfo, deviceCustomerInfo;
					var pubsubMessage, pubsubMessage2;
					/*
					var subCashierKeyMonitor, subCustomerKeyMonitor;
					var pubCashierChannel, pubCustomerChannel;

					// init device's on/off status on redis server
					for (var i = 0; i < results.length; i++) {
            			subCashierKeyMonitor = 'cashier' + CommonConstants.DELIMITER_MONITOR + results[i].login_id;
            			subCustomerKeyMonitor = 'customer' + CommonConstants.DELIMITER_MONITOR + results[i].login_id;

                        publisher.hdel(CommonConstants.HASH_NAME, subCashierKeyMonitor);
                        publisher.hdel(CommonConstants.HASH_NAME, subCustomerKeyMonitor);
					}
					*/

					for (var i = 0; i < results.length; i++) {
						deviceCashierInfo = {
							deviceId: results[i].login_id,
							subType: 'cashier',
							certification: trigger_key
						};
						deviceCustomerInfo = {
							deviceId: results[i].login_id,
							subType: 'customer',
							certification: trigger_key
						};

						pubsubMessage = new PubSubMessage();
						pubsubMessage2 = new PubSubMessage();
						pubsubMessage.initializeProperties('device_onoff', deviceCashierInfo);
						pubsubMessage2.initializeProperties('device_onoff', deviceCustomerInfo);

            			pubCashierChannel = 'cashier' + CommonConstants.DELIMITER + results[i].login_id;
            			pubCustomerChannel = 'customer' + CommonConstants.DELIMITER + results[i].login_id;
						publisher.publish(pubCashierChannel, pubsubMessage.getSerializedMessage());
						publisher.publish(pubCustomerChannel, pubsubMessage2.getSerializedMessage());
					}

				} else {
                    self._logger.log('ERROR', 'Fail inquiryBranchDevice');
                    self._logger.log('ERROR', trigger_key, ' trigger_key');                        
					// code..
				}
			});


			//socket.broadcast.emit('device_onoff');
        });

        /**
		 * send device's on/off status to monitor
         * 
		 * @param
         */
		socketUtil.on('device_onoff', function(pDeviceInfo) {
            var subType = pDeviceInfo.subType;
            var deviceId = pDeviceInfo.deviceId;

            // redis key for monitor
            subKeyMonitor = subType + CommonConstants.DELIMITER_MONITOR + deviceId;
            publisher.hset(CommonConstants.HASH_NAME, subKeyMonitor, pDeviceInfo.certification, redis.print);
			//io.sockets.in('monitor').emit('serviceMonitoring', pDeviceInfo);
        });
    });
};
