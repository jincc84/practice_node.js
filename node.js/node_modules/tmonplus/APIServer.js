/**
 * TmonPlus Service API Server
 * 
 * @author  
 */

var express = require('express'),
    fs = require('fs');

var PromotionProcess = require('tmonplus/api/PromotionProcess');

// uncaught exception
process.on('uncaughtException', function(error) {
    console.log('[API Server] uncaughtException\n%s', error.stack);
});

/**
 * Socket Server
 */
var APIServer = module.exports = function() {
    this._phase = 'real';
    this._conf = undefined;
    this._port = undefined;
};

/**
 * Set deploy phase
 * 
 * @param {Object} phase
 */
APIServer.prototype.setPhase = function(phase) {
    if (typeof phase !== 'undefined') {
        this._phase = phase;
        
        if (phase === 'real') {
            this._conf = require('../../config/setup');
        } else {
            this._conf = require('../../config/' + phase + '/setup');
        }
    }
};

/**
 * Set port
 * 
 * @param {Object} port
 */
APIServer.prototype.setPort = function(port) {
    this._port = port;
};

/**
 * Start socket server
 */
APIServer.prototype.start = function() {
    var self = this;
    
    if (this._conf.isSSL) {
        var options = {
            key: fs.readFileSync(__dirname + '/../../ssl/tmonplus.key_nopass'),
            cert: fs.readFileSync(__dirname + '/../../ssl/service_tmonplus_co_kr.crt'),
            ca: fs.readFileSync(__dirname + '/../../ssl/COMODOHigh-AssuranceSecureServerCA.crt')
        };
        this._server = express.createServer(options);
    } else {
        this._server = express.createServer();    
    }
    
    this._server.get('/api/promotion', function(request, response){

/*
        var remoteAddress = request.connection.remoteAddress;
        if (typeof remoteAddress === 'undefined') {
            console.log('Remote Address Error');
            response.send('Remote Address Error');
            return;
        }
        
        if (!self._checkRemoteAddress(remoteAddress)) {
            console.log('Access Denied');
            response.send('Access Denied');
            return;
        }
*/        
        var scheduleNo = request.query.scheduleNo;
        if (typeof scheduleNo === 'undefined') {
            console.log('Params Error');
            response.send('Params Error');
            return;
        }
        
        var promotionProcess = new PromotionProcess(self._phase);
        promotionProcess.initialize(scheduleNo);
        promotionProcess.process();
        
        response.send('Processed');
    });
    
    this._server.listen(this._port);
};

/**
 * 
 * @param {Object} remoteAddress
 */
APIServer.prototype._checkRemoteAddress = function(remoteAddress) {
    var allowedAddress = this._conf.apiHosts;
    for (var i = 0, l = allowedAddress.length; i < l; i++) {
        if (allowedAddress[i] === remoteAddress) {
            return true;
        }
    }
    
    return false;
};
