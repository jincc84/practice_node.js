/**
 * TmonPlus Promotion DB
 * 
 * @author  
 */

var mysql = require('mysql');
var queues = require('mysql-queues');
var block = require('node-block').block;
var Logger = require('tmonplus/modules/logger');

var PromotionDB = module.exports = function(dbConfig) {
    this._initPromotionDB(dbConfig);
    this._logger = new Logger('PromotionDB');
};

PromotionDB.prototype._initPromotionDB = function(dbConfig) {
    this._client = mysql.createClient(dbConfig);
    queues(this._client, true);
};

/**
 * 
 * @param {Object} callback
 */
PromotionDB.prototype.inquiryPromotionInfo = function(scheduleNo, callback) {
    var self = this;
    var query = 'SELECT package.branch_benefit_package_no branchBenefitPackageNo, package.package_name packageName, package.package_description packageDescription, sche.branch_giving_benefit_schedule_no branchGivingBenefitScheduleNo, branch.branch_no branchNo, branch.branch_name branchName ';
    query += 'FROM tb_branch_giving_benefit_schedule sche, tb_branch_benefit_package package, tb_branch branch ';
    query += 'WHERE sche.branch_giving_benefit_schedule_no = ? AND sche.branch_benefit_package_no = package.branch_benefit_package_no AND package.branch_no = branch.branch_no';
    
    this._client.query(query, [scheduleNo], function(error, promotionInfo) {
        if (error) {
            self._logger.log('ERROR', 'Fail inquiryPromotionInfo ' + error, '(scheduleNo : ' + scheduleNo + ')');
            callback('ERROR');
            return;
        }
        
        callback('SUCCESS', promotionInfo[0]);
    });
};

/**
 * 
 * @param {Object} promotion
 * @param {Object} callback
 */
PromotionDB.prototype.inquiryScheduleInfo = function(promotion, callback) {
    var self = this;
    var argument = arguments;
    
    block (
        /**
         * branch benefit 조회
         */
        function _selectBranchBenefit() {
            var query = 'SELECT benefit.name, benefit.`type`, benefit.unit, branch_ben.use_condition useCondition, branch_ben.give_amount giveAmount, branch_ben.branch_benefit_no branchBenefitNo, branch_ben.expire_type expireType, IF(branch_ben.expire_type = "SPECIFIED", branch_ben.specified_expire_date, now()) expireDate, branch_ben.expire_amount expireAmount, branch_ben.resource ';
            query += 'FROM tb_branch_benefit_package_item item, tb_branch_benefit branch_ben, tb_benefit benefit ';
            query += 'WHERE item.branch_benefit_package_no = ? AND item.branch_benefit_no = branch_ben.branch_benefit_no AND branch_ben.issue_status = "ACTIVE" AND branch_ben.benefit_no = benefit.benefit_no';
            
            self._client.query(query, [promotion.branchBenefitPackageNo], this.async('BENEFIT_LIST'));
        },
        /**
         * target customer 조회
         */
        function _selectBenefitScheduleTarget() {
            var query = 'SELECT target.branch_giving_benefit_schedule_target_no branchGivingBenefitScheduleTargetNo, target.customer_phone customerPhone, target.`status` status ';
            query += 'FROM tb_branch_giving_benefit_schedule_target target ';
            query += 'WHERE target.branch_giving_benefit_schedule_no = ? AND target.`status` = "STANDBY"';
            
            self._client.query(query, [promotion.branchGivingBenefitScheduleNo], this.async('TARGET_LIST'));
        },
        /**
         * 
         */
        function _inquiryScheduleInfoSuccess() {
            this.data.resultCode = 'SUCCESS';
        },
        function cat(e) {
            this.data.resultCode = 'ERROR';
            self._logger.log('ERROR', 'Fail inquiryScheduleInfo ' + e, '(' + JSON.stringify(argument) + ')');
        },
        function fin() {
            this.data.result = {
                resultCode : this.data.resultCode 
            };
            
            if (this.data.resultCode === 'SUCCESS') {
                this.data.result.benefitList = this.data.BENEFIT_LIST[0];
                this.data.result.targetList = this.data.TARGET_LIST[0];
            }
        }
    )(blockCallback);
    
    function blockCallback() {
        callback(this.data.result);
    }
};

/**
 * 
 * @param {Object} scheduleNo
 * @param {Object} status
 * @param {Object} callback
 */
PromotionDB.prototype.updatePromotionScheduleStatus = function(scheduleNo, status, callback) {
    var self = this;
    var query = 'UPDATE tb_branch_giving_benefit_schedule SET `status` = ? WHERE branch_giving_benefit_schedule_no = ?';
    this._client.query(query, [status, scheduleNo], function(error) {
        if (error) {
            self._logger.log('ERROR', 'Fail updatePromotionScheduleStatus ' + error, '(scheduleNo : ' + scheduleNo + ', status : ' + status +')');
            callback('ERROR');
            return;
        }
        
        callback('SUCCESS');        
    });  
};

/**
 * 
 * @param {Object} targetCustomerInfo
 * @param {Object} benefitInfo
 * @param {Object} callback
 */
PromotionDB.prototype.processGivingBenefit = function(targetCustomerInfo, benefitInfo, callback) {
    var self = this;
    var argument = arguments;
    
    var trans = this._client.startTransaction();
    trans.execute();
    block (
        /**
         * 
         */
        function _selectCustomerNO() {
            var query = 'SELECT customer.customer_no customerNo FROM tb_customer_phone phone, tb_customer customer WHERE phone.customer_phone = ? AND phone.is_active = "Y" AND phone.customer_no = customer.customer_no AND customer.`status` = "A"';
            trans.query(query, [targetCustomerInfo.customerPhone], this.async('CUSTOMER_NO'));
        },
        /**
         * branch customer benefit 입력
         */
        function _insertBranchCustomerBenefit() {
            for (var i = 0, l = benefitInfo.length; i < l; i++) {
                var query = 'INSERT INTO tb_branch_customer_benefit (branch_benefit_no, customer_no, given_amount, remain_amount, start_datetime, expire_datetime, create_datetime, update_datetime) VALUES (?, ?, ?, ?, NOW(), ?, NOW(), NOW())';
                trans.query(query, [benefitInfo[i].branchBenefitNo, this.data.CUSTOMER_NO[0][0].customerNo, benefitInfo[i].giveAmount, benefitInfo[i].giveAmount, benefitInfo[i].expire], this.async('CUSTOMER_BENEFIT_' + benefitInfo[i].branchBenefitNo));
            }
        },
        /**
         * branch customer benefit give log 입력
         */
        function _insertBranchCustomerBenefitGiveLog() {
            for (var i = 0, l = benefitInfo.length; i < l; i++) {
                var branchCustomerBenefitNo = this.data['CUSTOMER_BENEFIT_' + benefitInfo[i].branchBenefitNo].insertId;
                var query = 'INSERT INTO tb_branch_customer_benefit_give_log (branch_customer_benefit_no, give_type, give_subject, create_datetime, update_datetime) VALUES (?, ?, ?, NOW(), NOW())';
                trans.query(query, [branchCustomerBenefitNo, 'GIVE', 'SUPERADMIN'], this.async('BENEFIT_GIVE_LOG_' + branchCustomerBenefitNo));
            }
        },
        function _processGivingBenefitSuccess() {
            this.data.resultCode = 'SUCCESS';
        },
        function cat(e) {
            this.data.resultCode = 'ERROR';
            self._logger.log('ERROR', 'Fail processPromotion ' + e, '(' + JSON.stringify(argument) + ')');
            
            trans.rollback();
        },
        function fin() {
            this.data.result = {
                resultCode: this.data.resultCode
            };
            
            if (this.data.resultCode === 'SUCCESS') {
                trans.commit();
                
                var customerBenefitNos = {};
                for (var i = 0, l = benefitInfo.length; i < l; i++) {
                    customerBenefitNos[benefitInfo[i].branchBenefitNo] = this.data['CUSTOMER_BENEFIT_' + benefitInfo[i].branchBenefitNo].insertId;
                }
                
                this.data.result.customerBenefitNos = customerBenefitNos;
            }
        }
    )(blockCallback);
    
    function blockCallback() {
        callback(this.data.result);
    }
};

/**
 * 
 * @param {Object} status
 * @param {Object} callback
 */
PromotionDB.prototype.updatePromotionTargetStatus = function(scheduleTargetNo, status, callback) {
    var self = this;
    var query = 'UPDATE tb_branch_giving_benefit_schedule_target SET `status` = ? WHERE branch_giving_benefit_schedule_target_no = ?';
    this._client.query(query, [status, scheduleTargetNo], function(error) {
        if (error) {
            self._logger.log('ERROR', 'Fail updatePromotionTargetStatus ' + error, '(scheduleTargetNo : ' + scheduleTargetNo + ', status : ' + status +')');
            callback('ERROR');
            return;
        }
        
        callback('SUCCESS');        
    });
};

/**
 * 
 * @param {Object} callback
 */
PromotionDB.prototype.endPromotionDB = function(callback) {
    this._client.end(function() {
        callback();
    });
};