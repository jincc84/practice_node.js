/**
 * =======================================
 * Branch 정보 정의
 * =======================================
 * 
 * this._basicInfo 형식
 * {
 *      branchNo : 1,
 *      branchId : 'ticketmonster'
 * }
 * 
 * this._gradeInfo
 * {
 *   1 : 
 *       {
 *           branchGradeNo : 2,
 *           gradeLevel : 1,
 *           gradeName : 'FAMILY',
 *           gradeDescription : 'Family Grade'
 *       },
 *   2 : 
 *       {
 *           branchGradeNo : 3,
 *           gradeLevel : 2,
 *           gradeName : 'VIP',
 *           gradeDescription : 'VIP Grade'
 *       },
 *   3 : 
 *       {
 *           branchGradeNo : 4,
 *           gradeLevel : 3,
 *           gradeName : 'GOLD',
 *           gradeDescription : 'GOLD Grade'
 *       }
 * }
 * 
 * this._gradeCondition 형식
 * [
 *    {
 *      branchGradeNo : 3,
 *      gradeLevel : 3,
 *      gradeName : 'VIP',
 *      gradeDescription : 'VIP GRADE',
 *      branchGradeControlConditionNo : 3,
 *      branchGradeControlConditionSegmentNo : 5,
 *      unit : 'VISIT',
 *      amount : 5,
 *      type : 'GREATER_EQUAL'
 *    }
 * ]
 *  
 *  this._benefitGiveCondition 형식
 *  [
 *      { name : 'SAVE POINT', benefitType : 'SAVING', benefitUnit : 'POINT', giveAmount : 10, conditionUnit : 'GRADE', amount : 1, type : 'EQUAL' },
 *      { name : 'SAVE POINT', benefitType : 'SAVING', benefitUnit : 'POINT', giveAmount : 15, conditionUnit : 'GRADE', amount : 2, type : 'EQUAL' },
 *      { name : 'SAVE POINT', benefitType : 'SAVING', benefitUnit : 'POINT', giveAmount : 20, conditionUnit : 'GRADE', amount : 3, type : 'EQUAL' }
 *  ]
 *  
 *  this._promotionGiveCondition 형식
 *  [
 *      {
 *          packageName : 'THANK U COUPON', benefitType : 'COUPON', benefitUnit : 'POINT', giveAmount : 1000,
 *          condition : [
 *              {unit : 'VISIT', amount : 1, type : 'EQUAL'}
 *          ]
 *      },
 *      {
 *          packageName : 'THANK U COUPON', benefitType : 'COUPON', benefitUnit : 'POINT', giveAmount : 2000,
 *          condition : [
 *              {unit : 'GRADE', amount : 2, type : 'EQUAL'}
 *          ]
 *      },
 *      {
 *          packageName : 'THANK U COUPON', benefitType : 'COUPON', benefitUnit : 'POINT', giveAmount : 3000,
 *          condition : [
 *              {unit : 'GRADE', amount : 3, type : 'EQUAL'}
 *          ]
 *      },
 *      {
 *          packageName : 'THANK U COUPON', benefitType : 'COUPON', benefitUnit : 'POINT', giveAmount : 5000,
 *          condition : [
 *              {unit : 'VISIT', amount : 5, type : 'EACH'},
 *              {unit : 'PRICE', amount : 100000, type : 'EACH'},
 *              {unit : 'PRICE', amount : 50000, type : 'GREATER_EQUAL', segmentBaseType : 'DAY', segmentBaseAmount : 1},
 *              {unit : 'VISIT', amount : 1, type : 'EQUAL', segmentBaseType : 'DAY', segmentBaseAmount : 5}
 *          ]
 *      }
 *  ]
 *  
 *  this._benefitUseCondition 형식
 *  {
 *      useEachAmount : 0,
 *      useMinimumAmount : 1000,
 *  }
 */

/**
 * BranchInfo 생성자
 */
var BranchInfo = module.exports = function() {
    this._initialized = false;
    this._basicInfo = {};
    this._policyInfo = {};
    this._gradeInfo = {};
    this._gradeCondition = [];
    this._benefitGiveCondition = [];
    this._promotionGiveCondition = [];
    this._benefitUseCondition = {};
};

/**
 * Initialize
 * 
 * @param {Object} branchInfoDB
 */
BranchInfo.prototype.initialize = function(branchInfoDB) {
    this.initBasicInfo(branchInfoDB.BASIC[0]);
    this.initPolicyInfo(branchInfoDB.POLICY[0]);
    this.initGradeCondition(branchInfoDB.GRADE_CONDITION);
    this.initBenefitGiveCondition(branchInfoDB.BENEFIT_CONDITION);
    this.initBenefitUseCondition(branchInfoDB.POLICY[0]);
    this._initialized = true;
};

/**
 * 
 * @param {Object} pBranchInfo
 */
BranchInfo.prototype.initializeFrom = function(pBranchInfo) {
    if (pBranchInfo) {
        this._basicInfo = pBranchInfo.basicInfo;
        this._policyInfo = pBranchInfo.policyInfo;
        this._gradeInfo = pBranchInfo.gradeInfo;
        this._gradeCondition = pBranchInfo.gradeCondition;
        this._benefitGiveCondition = pBranchInfo.benefitGiveCondition;
        this._promotionGiveCondition = pBranchInfo.promotionGiveCondition;
        this._benefitUseCondition = pBranchInfo.benefitUseCondition;
        this._initialized = true;
    }
};

/**
 * 
 * @param {Object} basicInfo
 */
BranchInfo.prototype.initBasicInfo = function(basicInfo) {
    this._basicInfo = basicInfo;
};

/**
 * 
 */
BranchInfo.prototype.getBasicInfo = function() {
    return this._basicInfo;
};

/**
 * 
 * @param {Object} policyInfo
 */
BranchInfo.prototype.initPolicyInfo = function(policyInfo) {
    this._policyInfo = policyInfo;
};

/**
 * 
 */
BranchInfo.prototype.getPolicyInfo = function() {
    return this._policyInfo;
};

/**
 * 
 */
BranchInfo.prototype.getGradeInfo = function() {
    return this._gradeInfo;
};

/**
 * BranchInfo 등급조건(GradeCondition) 초기화
 * 
 * @param {Object} Grade Condition
 */
BranchInfo.prototype.initGradeCondition = function(gradeCondition) {
    for (var i = 0; i < gradeCondition.length; i++) {
        if (!this._gradeInfo[gradeCondition[i].gradeLevel]) {
            this._gradeInfo[gradeCondition[i].gradeLevel] = {
                branchGradeNo : gradeCondition[i].branchGradeNo,
                gradeLevel : gradeCondition[i].gradeLevel,
                gradeName : gradeCondition[i].gradeName,
                gradeDescription : gradeCondition[i].gradeDescription
            };
        }
    }
    
    this._gradeCondition = gradeCondition;
};
/**
 * Get Object
 */
BranchInfo.prototype.getObject = function() {
    return {
        basicInfo: this._basicInfo,
        policyInfo: this._policyInfo,
        gradeInfo: this._gradeInfo,
        gradeCondition: this._gradeCondition,
        benefitGiveCondition: this._benefitGiveCondition,
        promotionGiveCondition: this._promotionGiveCondition,
        benefitUseCondition: this._benefitUseCondition
    };
};

/**
 * Get Grade Condition
 */
BranchInfo.prototype.getGradeCondition = function() {
    return this._gradeCondition;
};

/**
 * BranchInfo 혜택 지급조건 (BenefitGiveCondition) 초기화
 * 
 * @param {Object} benefitCondition
 */
BranchInfo.prototype.initBenefitGiveCondition = function(benefitGiveCondition) {
    this._benefitGiveCondition = [];
    this._promotionGiveCondition = [];
     
    var prevPackageNo = -100;
    var currPackageNo;
    var promotionInfo = null;
    
    for (var i = 0; i < benefitGiveCondition.length; i++) {
        if (benefitGiveCondition[i].benefitType === 'SAVING') {
            this._benefitGiveCondition.push(benefitGiveCondition[i]);
        } else {
            currPackageNo = benefitGiveCondition[i].packageNo;
            
            if (prevPackageNo !== currPackageNo) {
                if (prevPackageNo > 0) {
                    this._promotionGiveCondition.push(promotionInfo);
                }
                
                prevPackageNo = benefitGiveCondition[i].packageNo;
                
                promotionInfo = {};
                promotionInfo.packageNo = benefitGiveCondition[i].packageNo;
                promotionInfo.packageName = benefitGiveCondition[i].packageName;
                promotionInfo.packageDescription = benefitGiveCondition[i].packageDescription;
                promotionInfo.benefit = {};
                promotionInfo.condition = [];
            }

            if (benefitGiveCondition[i].benefitType !== 'NONE' && !(('bb' + benefitGiveCondition[i].branchBenefitNo) in promotionInfo.benefit)) {
                var tempExpireDate = new Date(benefitGiveCondition[i].expireDate);
                //tempExpireDate.setMinutes(tempExpireDate.getMinutes() + tempExpireDate.getTimezoneOffset() * -1);
                
                promotionInfo.benefit['bb' + benefitGiveCondition[i].branchBenefitNo] = {
                    branchBenefitNo: benefitGiveCondition[i].branchBenefitNo,
                    resource: benefitGiveCondition[i].resource,
                    benefitName: benefitGiveCondition[i].benefitName,
                    benefitType: benefitGiveCondition[i].benefitType,
                    benefitUnit: benefitGiveCondition[i].benefitUnit,
                    giveAmount: benefitGiveCondition[i].giveAmount,
                    expireType: benefitGiveCondition[i].expireType,
                    expireDate: tempExpireDate,
                    expireAmount: benefitGiveCondition[i].expireAmount,
                    useCondition : benefitGiveCondition[i].useCondition
                };
            }            
            
            promotionInfo.condition.push({
                conditionNo: benefitGiveCondition[i].conditionNo,
                conditionUnit: benefitGiveCondition[i].conditionUnit,
                conditionAmount: benefitGiveCondition[i].conditionAmount,
                conditionType: benefitGiveCondition[i].conditionType,
                baseType: benefitGiveCondition[i].baseType,
                baseAmount: benefitGiveCondition[i].baseAmount
            });
        }
    }
            
    if (promotionInfo !== null) {
        this._promotionGiveCondition.push(promotionInfo);
    }
};

/**
 * 
 * @param {Object} benefitUseCondition
 */
BranchInfo.prototype.initBenefitUseCondition = function(benefitUseCondition) {
    this._benefitUseCondition = benefitUseCondition;
};

/**
 * Get Benefit Condition
 */
BranchInfo.prototype.getBenefitUseCondition = function() {
    return this._benefitUseCondition;
};

/**
 * Get Benefit Condition
 */
BranchInfo.prototype.getBenefitGiveCondition = function() {
    return this._benefitGiveCondition;
};

/**
 * 
 */
BranchInfo.prototype.initialized = function() {
    return this._initialized;
};


/**
 * 프로모션 처리
 * 프로모션 대상이면 해당 프로모션 목록을 반환한다
 * 
 * @param {Object} customerInfo Customer Information
 */
BranchInfo.prototype.processPromotion = function(customerInfo, paymentPrice) {
    var targetPromotion = [];
    var promotionList = this._promotionGiveCondition;
    
    for (var i = 0, n = promotionList.length; i < n; i++) {
        var result = [];
        var aList = promotionList[i].condition;
        
        for (var j = 0, m = aList.length; j < m; j++) {
            var conditionNo = aList[j].conditionNo;
            
            if ((conditionNo in result) === false) {
                result[conditionNo] = true;
            }

            if (result[conditionNo] === true) {
                result[conditionNo] = result[conditionNo] && this._checkCondition(customerInfo, aList[j], paymentPrice);
                
                if (aList[j].conditionUnit === 'GRADE' && aList[j].conditionType === 'EQUAL' && (customerInfo.getGradeInfo().currentGradeLevel >= customerInfo.getGradeInfo().gradeLevel || customerInfo.getGradeInfo().gradeLevel < 2)) {
                    result[conditionNo] = false;
                }
            }                
        }

        for (var key in result) {
            if (result[key] === true) {
                targetPromotion.push(promotionList[i]);
                break;
            }
        }
    }
    
    return targetPromotion;
};

/**
 * Customer 승급된 등급 반환
 * 승급대상이면 승급된 등급을, 승급대상이 아니면 현재 등급을 반환한다
 * 
 * @param {Object} customerInfo Customer Information
 */
BranchInfo.prototype.processGradeChange = function(customerInfo, paymentPrice) {
    var result = [];
    var aList = this._gradeCondition;
    
    for (var i = 0, n = aList.length; i < n; i++) {
        var conditionNo = aList[i].branchGradeControlConditionNo;
        if (!(conditionNo in result)) {
            result[conditionNo] = {value: true, gradeLevel: aList[i].gradeLevel};
        }
        
        if (result[conditionNo].value) {
            result[conditionNo].value = result[conditionNo].value && this._checkCondition(customerInfo, aList[i], paymentPrice);
        }
    }
    
    var maxGradeLevel = Math.max(customerInfo.getGradeLevel(), 1);
    
    for (var key in result) {
        if (result[key].value) {
            maxGradeLevel = Math.max(maxGradeLevel, result[key].gradeLevel);
        }
    }
    
    return this._gradeInfo[maxGradeLevel];
};

/**
 * 조건 검사
 * 
 * @param {Object} customerInfo
 *                      Customer Information
 * @param {Object} grade
 *                      Grade (등급)
 */
BranchInfo.prototype._checkCondition = function(customerInfo, condition, paymentPrice) {
    var checkValue = 0;
    var conditionUnit = condition.conditionUnit;
    
    if (conditionUnit === 'VISIT') {
        checkValue = customerInfo.getVisitCountByCondition(condition);
    } else if (conditionUnit === 'PRICE') {
        checkValue = customerInfo.getPaymentPriceByCondition(condition, paymentPrice);
    } else if (conditionUnit === 'GRADE') {
        checkValue = customerInfo.getGradeLevel();
    }
    
    return this._isSatisfyCondition(condition.conditionType, Number(checkValue), Number(condition.conditionAmount));
};

/**
 * 세부 조건 충족여부 체크
 * 
 * @param {Object} operator
 *                      세부조건
 *                          'LESS_THAN','LESS_EQUAL','GREATER_THAN','GREATER_EQUAL','EACH','EQUAL'
 * @param {Object} checkValue
 *                      체크대상 value
 * @param {Object} criteria
 *                      비교 기준값
 */
BranchInfo.prototype._isSatisfyCondition = function(operator, checkValue, criteria) {
    if (operator === 'LESS_THAN') {
        return checkValue < criteria;
    } else if (operator === 'LESS_EQUAL') {
        return checkValue <= criteria;
    } else if (operator === 'GREATER_THAN') {
        return checkValue > criteria;
    } else if (operator === 'GREATER_EQUAL') {
        return checkValue >= criteria;
    } else if (operator === 'EACH') {
        return criteria % checkValue === 0;
    } else if (operator === 'EQUAL') {
        return checkValue === criteria;
    } else {
        return false;
    }
};