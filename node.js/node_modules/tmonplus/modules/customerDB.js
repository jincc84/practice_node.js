var mysql = require('mysql');
var queues = require('mysql-queues');
var block = require('node-block').block;
var CommonUtil = require('tmonplus/modules/commonUtil');
var Logger = require('tmonplus/modules/logger');

/**
 *
 *
 * @param {Object}
 *            config
 */
var CustomerDB = module.exports = function(dbConfig) {
    this._initCustomerDB(dbConfig);
    this._logger = new Logger('CustomerDB');
};

/**
 *
 * @param {Object}
 *            dbConfig
 */
CustomerDB.prototype._initCustomerDB = function(dbConfig) {
    this._client = mysql.createClient(dbConfig);
    queues(this._client, true);
};

/**
 *
 * @param {Object} callback
 */
CustomerDB.prototype.endCustomerDB = function(callback) {
    this._client.end(function() {
        callback();
    });
};

/**
 * Customer 정보 조회 1. 회원인지 체크 2. 비회원일 경우 : 비회원 callback ('NONMEMBER') 3. 회원일 경우 :
 * Customer의 가맹점 등급/혜택/요약 정보 조회
 *
 * @param {Object}
 *            loginData branchNo : 가맹점번호 customerPhone : 전화번호
 * @param {Object}
 *            callback
 */
CustomerDB.prototype.inquiryCustomerInfo = function(loginData, callback) {
    var self = this;
    var argument = arguments;
    
    block(    /**
     * Customer 기본정보 조회
     *
     * SELECT customer.customer_no customerNo, phone.customer_phone
     * customerPhone, IF(CHAR_LENGTH(customer.customer_name) > 0,
     * customer.customer_name, SUBSTR(phone.customer_phone,
     * LENGTH(phone.customer_phone)-3)) customerName, customer.sex,
     * customer.age_group ageGroup, customer.birth_ymd birthYmd FROM
     * tb_customer_phone phone, tb_customer customer WHERE
     * phone.customer_phone = '01027864710' AND phone.is_active = 'Y'
     * AND phone.customer_no = customer.customer_no AND customer.`status` = 'A';
     */
    function _selectCustomerBasic() {
        var query = 'SELECT customer.customer_no customerNo, phone.customer_phone customerPhone, IF(CHAR_LENGTH(customer.customer_name) > 0, customer.customer_name, SUBSTR(phone.customer_phone, LENGTH(phone.customer_phone)-3)) customerName, customer.sex, customer.age_group ageGroup, customer.birth_ymd birthYmd';
        query += ' FROM tb_customer_phone phone, tb_customer customer WHERE phone.customer_phone = ? AND phone.is_active = "Y" AND phone.customer_no = customer.customer_no AND customer.status = ?';
        
        self._client.query(query, [loginData.customerPhone, 'A'], this.async('BASIC'));
    },    /**
     * 기존 가입한 Customer 인지 체크 신규 가입한 Customer인 경우 grade, summary,
     * benefit은 조회하지 않고 'NONMEMBER' 처리
     */
    function _checkNonmember() {
        if (this.data.BASIC[0].length < 1) {
            this.data.resultCode = 'NONMEMBER';
            this.end();
        }
    },    /**
     * Customer 등급정보 조회
     *
     * SELECT customer.branch_customer_grade_no branchCustomerGradeNo,
     * customer.branch_grade_no branchGradeNo, grade.`level` grade,
     * grade.grade_name gradeName, grade.description gradeDescription
     * FROM tb_branch_customer_grade customer, tb_branch_grade grade
     * WHERE customer.customer_no = 3 AND customer.is_active = 'Y' AND
     * customer.branch_grade_no = grade.branch_grade_no AND
     * grade.branch_no = 1 AND grade.is_active = 'Y';
     */
    function _selectCustomerGrade() {
        var query = 'SELECT customer.branch_customer_grade_no branchCustomerGradeNo, customer.branch_grade_no branchGradeNo, grade.grade_level currentGradeLevel, grade.grade_level gradeLevel, grade.grade_name gradeName, grade.description gradeDescription';
        query += ' FROM tb_branch_customer_grade customer, tb_branch_grade grade WHERE customer.customer_no = ? AND customer.is_active = "Y" AND customer.branch_grade_no = grade.branch_grade_no AND grade.branch_no = ? AND grade.is_active = "Y"';
        
        self._client.query(query, [this.data.BASIC[0][0].customerNo, loginData.branchNo], this.async('GRADE'));
    },    /**
     * Customer 요약정보 조회
     *
     * SELECT total_payment_price totalPaymentPrice, total_visit_count totalVisitCount,
     * DATEDIFF(NOW(), update_datetime) lastVisitDays, create_datetime createDatetime, update_datetime updateDatetime
     * FROM tb_branch_customer_summary WHERE branch_no = 1 AND
     * customer_no = 3;
     */
    function _selectCustomerSummary() {
        var query = 'SELECT total_payment_price totalPaymentPrice, total_visit_count totalVisitCount, DATEDIFF(NOW(), update_datetime) lastVisitDays, create_datetime createDatetime, update_datetime updateDatetime FROM tb_branch_customer_summary WHERE branch_no = ? AND customer_no = ?';
        
        self._client.query(query, [loginData.branchNo, this.data.BASIC[0][0].customerNo], this.async('SUMMARY'));
    },    /**
     * Customer 수신거부 정보 조회
     *
     * SELECT IFNULL(SUM(IF(refusal_type = "SMS", 1, 0)), 0) sms, IFNULL(SUM(IF(refusal_type = "EMAIL", 1, 0)), 0) email
     * FROM tb_branch_customer_reception_refusal WHERE customer_no = 158 AND (branch_no IS NULL OR branch_no = 6);
     */
    function _selectCustomerReceptionRefusal() {
        var query = 'SELECT IFNULL(SUM(IF(refusal_type = "SMS", 1, 0)), 0) sms, IFNULL(SUM(IF(refusal_type = "EMAIL", 1, 0)), 0) email FROM tb_branch_customer_reception_refusal WHERE customer_no = ? AND (branch_no IS NULL OR branch_no = ?)';
        
        self._client.query(query, [this.data.BASIC[0][0].customerNo, loginData.branchNo], this.async('RECEPTION_REFUSAL'));
    },    /**
     * Customer 혜택정보 조회
     *
     * SELECT branch.branch_benefit_no branchBenefitNo,
     * branch.benefit_no benefitNo, branch.resource benefitResource,
     * customer.branch_customer_benefit_no branchCustomerBenefitNo,
     * customer.given_amount givenAmount, customer.remain_amount
     * remainAmount, benefit.name, benefit.type, benefit.unit,
     * customer.start_datetime startDatetime, customer.expire_datetime
     * expireDatetime FROM tb_branch_benefit branch,
     * tb_branch_customer_benefit customer, tb_benefit benefit WHERE
     * branch.branch_no = 1 AND branch.branch_benefit_no =
     * customer.branch_benefit_no AND customer.customer_no = 3 AND NOW()
     * BETWEEN customer.start_datetime AND customer.expire_datetime AND
     * customer.remain_amount > 0 AND branch.benefit_no =
     * benefit.benefit_no AND benefit.is_active = 'Y' ORDER BY
     * expireDatetime ASC;
     */
    function _selectCustomerBenefit() {
        var query = 'SELECT branch.branch_benefit_no branchBenefitNo, branch.benefit_no benefitNo, branch.resource benefitResource, branch.use_condition benefitUseCondition, customer.branch_customer_benefit_no branchCustomerBenefitNo, customer.given_amount givenAmount, customer.remain_amount remainAmount, benefit.name, benefit.type, benefit.unit, customer.start_datetime startDatetime, customer.expire_datetime expireDatetime';
        query += ' FROM tb_branch_benefit branch, tb_branch_customer_benefit customer, tb_benefit benefit';
        query += ' WHERE branch.branch_no = ? AND branch.branch_benefit_no = customer.branch_benefit_no AND customer.customer_no = ?';
        query += ' AND NOW() BETWEEN customer.start_datetime AND customer.expire_datetime AND customer.remain_amount > 0 AND branch.benefit_no = benefit.benefit_no AND benefit.is_active = "Y"';
        query += ' ORDER BY expireDatetime ASC';
        
        self._client.query(query, [loginData.branchNo, this.data.BASIC[0][0].customerNo], this.async('BENEFIT'));
    },    /**
     * Customer Payment 정보 조회
     *
     * SELECT branch_customer_payment_no branchCustomerPaymentNo, branch_no branchNo, payment_price paymentPrice, create_datetime createDatetime
     * FROM tb_branch_customer_payment
     * WHERE branch_no = 1 AND customer_no = 1 AND status = 'PAID'
     * ORDER BY create_datetime DESC
     */
    function _selectBranchCustomerPayment() {
        var query = 'SELECT branch_customer_payment_no branchCustomerPaymentNo, branch_no branchNo, payment_price paymentPrice, create_datetime createDatetime ';
        query += 'FROM tb_branch_customer_payment ';
        query += 'WHERE branch_no = ? AND customer_no = ? AND status = "PAID" ';
        query += 'ORDER BY createDatetime DESC';
        
        self._client.query(query, [loginData.branchNo, this.data.BASIC[0][0].customerNo], this.async('PAYMENT'));
    },    /**
     * process 성공
     */
    function _inquirySucceed() {
        this.data.resultCode = 'SUCCESS';
    },
    function cat(e) {
        this.data.resultCode = 'ERROR';
        self._logger.log('ERROR', 'Fail inquiryCustomerInfo ' + e, '(' + JSON.stringify(argument) + ')');
    },
    function fin() {
    })(blockCallback);
    
    function blockCallback() {
        var customerInfoDB = {
            RESULT_CODE: this.data.resultCode
        };
        
        if (this.data.resultCode === 'SUCCESS') {
            customerInfoDB.BASIC = this.data.BASIC[0];
            customerInfoDB.GRADE = this.data.GRADE[0];
            customerInfoDB.SUMMARY = this.data.SUMMARY[0];
            customerInfoDB.BENEFIT = this.data.BENEFIT[0];
            customerInfoDB.PAYMENT = this.data.PAYMENT[0];
            customerInfoDB.RECEPTION_REFUSAL = this.data.RECEPTION_REFUSAL[0];
        }
        
        callback(customerInfoDB);
    }
};

/**
 * 비회원 가입 Proccess
 *
 * @param {Object}
 *            customerPhone
 * @param {Object}
 *            callback
 */
CustomerDB.prototype.processSignUp = function(customerPhone, callback) {
    var trans = this._client.startTransaction();
    var argument = arguments;
    
    block(    /**
     * 고객 입력
     *
     * INSERT INTO tb_customer SET status= "A", create_datetime=NOW(),
     * update_datetime=NOW()
     */
    function _insertCustomer() {
        trans.query('INSERT INTO tb_customer SET status= "A", create_datetime=NOW(), update_datetime=NOW()', [], this.async('CUSTOMER'));
        trans.execute();
    },    /**
     * 고객 핸드폰정보 입력
     *
     * INSERT INTO tb_customer_phone SET customer_no=?,
     * customer_phone=?, is_active="Y", create_datetime=NOW(),
     * update_datetime=NOW()
     */
    function _insertCustomerPhone() {
        var customerNo = this.data.CUSTOMER.insertId;
        trans.query('INSERT INTO tb_customer_phone SET customer_no=?, customer_phone=?, is_active="Y", create_datetime=NOW(), update_datetime=NOW()', [customerNo, customerPhone], this.async('CUSTOMER_PHONE'));
    },    /**
     * 고객 정보제공 동의로그 입력
     *
     * INSERT INTO tb_customer_agreement_log SET customer_no=?,
     * agreement_name="PRIVACY", agree_date=NOW()
     */
    function _insertCustomerAgreementLog() {
        var customerNo = this.data.CUSTOMER.insertId;
        trans.query('INSERT INTO tb_customer_agreement_log SET customer_no=?, agreement_name="PRIVACY", agree_date=NOW()', [customerNo], this.async('CUSTOMER_AGREEMENT'));
    },    /**
     * processSignUp 성공
     */
    function _processSignUpSuccess() {
        this.data.resultCode = 'SUCCESS';
    },
    function cat(e) {
        this.data.resultCode = 'ERROR';
        self._logger.log('ERROR', 'Fail processSignUp ' + e, '(' + JSON.stringify(argument) + ')');
        
        trans.rollback();
    },
    function fin() {
        this.data.result = {
            resultCode : this.data.resultCode,
        };
        
        if (this.data.resultCode === 'SUCCESS') {
            trans.commit();
            this.data.result.customerNo = this.data.CUSTOMER.insertId;
        }
    })(blockCallback);
    
    function blockCallback() {
        callback(this.data.result);
    }
};

/**
 * 비회원 가입취소 Proccess
 *
 * @param {Object}
 *            customerPhone
 * @param {Object}
 *            callback
 */
CustomerDB.prototype.cancelSignUp = function(customerPhone, callback) {
    var self = this;
    var trans = this._client.startTransaction();
    var argument = arguments;
    
    block(    
    function _updateCustomerPhone() {
        trans.query('UPDATE tb_customer_phone SET is_active="N", update_datetime=NOW() WHERE customer_phone = ? AND is_active = "Y"', [customerPhone], this.async('CUSTOMER_PHONE'));
    },
    function _updateCustomer() {
        var customerNo = this.data.CUSTOMER.insertId;
        trans.query('UPDATE tb_customer SET status="D", update_datetime=NOW() WHERE customer_no = (SELECT MAX(customer_no) FROM tb_customer_phone WHERE customer_phone = ? AND is_active = "Y") AND status = "A"', [customerPhone], this.async('CUSTOMER'));
    },
    function cat(e) {
        this.data.resultCode = 'ERROR';
        self._logger.log('ERROR', 'Fail cancelSignUp ' + e, '(' + JSON.stringify(argument) + ')');
        
        trans.rollback();
    },
    function fin() {
        if (this.data.resultCode === 'SUCCESS') {
            trans.commit();
        }
        
        this.data.result = {
            resultCode : this.data.resultCode
        };
    })(blockCallback);
    
    function blockCallback() {
        callback(this.data.result);
    }
};

/**
 * Customer 비밀번호 체크
 *
 * ============================================================================
 * SELECT COUNT(*) customerCount FROM tb_customer_phone WHERE customer_no = ?
 * AND password = ?
 * ============================================================================
 *
 * @param {Object}
 *            customerNo
 * @param {Object}
 *            customerPassword
 * @param {Object}
 *            callback
 */
CustomerDB.prototype.verifyCustomerPassword = function(customerNo, customerPassword, callback) {
    var query = 'SELECT COUNT(*) customerCount FROM tb_customer_phone WHERE customer_no = ? AND password = ?';
    
    this._client.query(query, [customerNo, customerPassword], function(error, results) {
        var resultCode = 'SUCCESS';
        if (error) {
            resultCode = 'ERROR';
        } else {
            if (results[0].customerCount <= 0) {
                resultCode = 'ERROR';
            }
        }
        
        callback(resultCode);
    });
};

/**
 * 결제/혜택사용/적립 처리
 *
 * @param {Object}
 *            customerInfo
 * @param {Object}
 *            branchInfo
 * @param {Object}
 *            callback
 */
CustomerDB.prototype.processPaymentAndUseBenefit = function(paymentAndBenefitInfo, customerInfo, branchInfo, callback) {
    var self = this;
    var resultCode = 'SUCCESS';
    
    var branchBasicInfo = branchInfo.getBasicInfo();
    var branchGradeCondition = branchInfo.getGradeCondition();
    
    var customerBasicInfo = customerInfo.getBasicInfo();
    var customerSummary = customerInfo.getSummary();
    var customerUseBenefit = customerInfo.getUseBenefit();
    
    var trans = this._client.startTransaction();
    var argument = arguments;
    
    block(    /**
     * 결제정보 입력
     *
     * INSERT INTO tb_branch_customer_payment SET branch_no=?, customer_no=?,
     * payment_price=?, status="PAID", create_datetime=NOW(),
     * update_datetime=NOW()
     */
    function _insertBranchCustomerPayment() {
        var query = 'INSERT INTO tb_branch_customer_payment (branch_no, customer_no, payment_price, order_price, status, create_datetime, update_datetime) VALUES (?, ?, ?, ?, \'PAID\', NOW(), NOW())';
        trans.query(query, [branchBasicInfo.branchNo, customerBasicInfo.customerNo, paymentAndBenefitInfo.paymentPrice, paymentAndBenefitInfo.orderPrice], this.async('PAYMENT'));
        trans.execute();
    },    /**
     *
     */
    function _insertPaymentTransactionSummary() {
        var query = 'INSERT INTO tb_payment_transaction_summary (branch_customer_payment_no, customer_name, use_point_amount, use_benefit_amount) VALUES (?, ?, ?, ?)';
        trans.query(query, [this.data.PAYMENT.insertId, customerBasicInfo.customerName, paymentAndBenefitInfo.usePoint, paymentAndBenefitInfo.useBenefit], this.async('PAYMENT_SUMMARY'));
    },    /**
     * 혜택 입력
     *
     * INSERT INTO tb_branch_customer_benefit SET branch_benefit_no=?,
     * customer_no=?, branch_customer_payment_no=?, given_amount=?,
     * remain_amount=?, start_datetime=NOW(), expire_datetime=NOW() + INTERVAL 1
     * YEAR, create_datetime=NOW(), update_datetime=NOW()
     */
    function _insertBranchCustomerBenefit() {
        if (paymentAndBenefitInfo.savingPoint.savingAmount > 0) {
            var query = 'INSERT INTO tb_branch_customer_benefit (branch_benefit_no, customer_no, branch_customer_payment_no, given_amount, remain_amount, start_datetime, expire_datetime, create_datetime, update_datetime) VALUES (?, ?, ?, ?, ?, NOW(), ?, NOW(), NOW())';
            //var _expire = new Date(expireDate);
            //var _expire = new Date(paymentAndBenefitInfo.savingPoint.expireDate);
            
            /*
            if (paymentAndBenefitInfo.savingPoint.expireType === 'PERMANENT') {
                _expire = CommonUtil.addYears(_expire, 100);
            } else if (paymentAndBenefitInfo.savingPoint.expireType === 'DAYS_AFTER') {
                _expire = CommonUtil.addDays(_expire, paymentAndBenefitInfo.savingPoint.expireAmount);
            } else if (paymentAndBenefitInfo.savingPoint.expireType === 'WEEKS_AFTER') {
                _expire = CommonUtil.addDays(_expire, paymentAndBenefitInfo.savingPoint.expireAmount * 7);
            } else if (paymentAndBenefitInfo.savingPoint.expireType === 'MONTHS_AFTER') {
                _expire = CommonUtil.addMonths(_expire, paymentAndBenefitInfo.savingPoint.expireAmount);
            } else if (paymentAndBenefitInfo.savingPoint.expireType === 'YEARS_AFTER') {
                _expire = CommonUtil.addYears(_expire, paymentAndBenefitInfo.savingPoint.expireAmount);
            }*/
           
            var _expire = CommonUtil.toLocaleTime(CommonUtil.getExpireDate(paymentAndBenefitInfo.savingPoint.expireType, paymentAndBenefitInfo.savingPoint.expireAmount, new Date(paymentAndBenefitInfo.savingPoint.expireDate)));
            trans.query(query, [paymentAndBenefitInfo.savingPoint.branchBenefitNo, customerBasicInfo.customerNo, this.data.PAYMENT.insertId, paymentAndBenefitInfo.savingPoint.savingAmount, paymentAndBenefitInfo.savingPoint.savingAmount, _expire], this.async('CUSTOMER_BENEFIT'));
        }
    },    /**
     * 혜택 제공로그
     *
     * INSERT INTO tb_branch_customer_benefit_give_log (branch_customer_benefit_no, give_type, give_subject, create_datetime, update_datetime) VALUES (?, ?, ?, NOW(), NOW())
     */
    function _insertBranchCustomerBenefitGiveLog() {
        if (this.data.CUSTOMER_BENEFIT && this.data.CUSTOMER_BENEFIT.affectedRows > 0) {
            var query = 'INSERT INTO tb_branch_customer_benefit_give_log (branch_customer_benefit_no, give_type, give_subject, create_datetime, update_datetime) VALUES (?, ?, ?, NOW(), NOW())';
            trans.query(query, [this.data.CUSTOMER_BENEFIT.insertId, 'GIVE', 'AUTO'], this.async('SAVING_BENEFIT_GIVE_LOG'));
        }
    },    /**
     * 프로모션 혜택 입력
     *
     * INSERT INTO tb_branch_customer_benefit SET branch_benefit_no=?,
     * customer_no=?, branch_customer_payment_no=?, given_amount=?,
     * remain_amount=?, start_datetime=NOW(), expire_datetime=NOW() + INTERVAL 1
     * YEAR, create_datetime=NOW(), update_datetime=NOW()
     */
    function _insertBranchCustomerPromotionBenefit() {
        this.data.targetBenefitLength = 0;
        this.data.targetBenefitLength = {};
        for (var i = 0, n = paymentAndBenefitInfo.targetPromotion.length; i < n; i++) {
            var targetPromotion = paymentAndBenefitInfo.targetPromotion[i];

            this.data.targetBenefitLength[targetPromotion.packageNo] = 0;            
            for (var key in targetPromotion.benefit) {
                if (targetPromotion.benefit.hasOwnProperty(key)) {
                    this.data.targetBenefitLength[targetPromotion.packageNo]++;
                    var targetBenefit = targetPromotion.benefit[key];
                    
                    var query = 'INSERT INTO tb_branch_customer_benefit (branch_benefit_no, customer_no, branch_customer_payment_no, given_amount, remain_amount, start_datetime, expire_datetime, create_datetime, update_datetime) VALUES (?, ?, ?, ?, ?, NOW(), ?, NOW(), NOW())';

                    var _amount = targetBenefit.benefitUnit === 'POINT' ? targetBenefit.giveAmount : 1;
                    var _expire = CommonUtil.toLocaleTime(CommonUtil.getExpireDate(targetBenefit.expireType, targetBenefit.expireAmount, new Date(targetBenefit.expireDate)));
                    
                    trans.query(query, [targetBenefit.branchBenefitNo, customerBasicInfo.customerNo, this.data.PAYMENT.insertId, _amount, _amount, _expire], this.async('CUSTOMER_PROMOTION_BENEFIT_' + i + '_' + key));
                }
            }
        }
    },    /**
     * 프로모션 혜택 입력 제공로그
     */
    function _insertBranchCustomerPromotionBenefit() {
        for (var i = 0, n = paymentAndBenefitInfo.targetPromotion.length; i < n; i++) {
            var targetPromotion = paymentAndBenefitInfo.targetPromotion[i];
            
            for (var key in targetPromotion.benefit) {
                if (targetPromotion.benefit.hasOwnProperty(key)) {
                    targetPromotion.benefit[key].branchCustomerBenefitNo = this.data['CUSTOMER_PROMOTION_BENEFIT_' + i + '_' + key].insertId;
                    var query = 'INSERT INTO tb_branch_customer_benefit_give_log (branch_customer_benefit_no, give_type, give_subject, create_datetime, update_datetime) VALUES (?, ?, ?, NOW(), NOW())';
                    trans.query(query, [this.data['CUSTOMER_PROMOTION_BENEFIT_' + i + '_' + key].insertId, 'GIVE', 'AUTO'], this.async('CUSTOMER_PROMOTION_BENEFIT_GIVE_LOG_' + i + '_' + key));
                }
            }
        }
    },    /**
     * 혜택 사용정보 반영
     *
     * UPDATE tb_branch_customer_benefit SET remain_amount=remain_amount-?,
     * update_datetime=NOW() WHERE branch_customer_benefit_no=?
     */
    function _updateBranchCustomerBenefit() {
        for (var i = 0; i < customerUseBenefit.length; i++) {
            var query = 'UPDATE tb_branch_customer_benefit SET remain_amount=remain_amount-?, update_datetime=NOW() WHERE branch_customer_benefit_no=?';
            trans.query(query, [customerUseBenefit[i].useAmount, customerUseBenefit[i].branchCustomerBenefitNo], this.async('CUSTOMER_BENEFIT_USE_' + customerUseBenefit[i].branchCustomerBenefitNo));
            
            self._logger.log('INFO', 'processPaymentAndUseBenefit useBenefit', '(' + JSON.stringify(customerUseBenefit[i]) + ')');
        }
    },    /**
     * 혜택 사용로그 입력
     *
     * INSERT INTO tb_branch_customer_benefit_use_log SET
     * branch_customer_benefit_no=?, branch_customer_payment_no=?, amount=?,
     * status="USED", create_datetime=NOW(), update_datetime=NOW()
     */
    function _insertBranchCustomerBenefitUseLog() {
        for (var i = 0; i < customerUseBenefit.length; i++) {
            var query = 'INSERT INTO tb_branch_customer_benefit_use_log (branch_customer_benefit_no, branch_customer_payment_no, amount, status, create_datetime, update_datetime) VALUES (?, ?, ?, \'USED\', NOW(), NOW())';
            trans.query(query, [customerUseBenefit[i].branchCustomerBenefitNo, this.data.PAYMENT.insertId, customerUseBenefit[i].useAmount], this.async('CUSTOMER_BENEFIT_USE_LOG_' + this.data.PAYMENT.insertId));
        }
    },    /**
     * 고객 요약정보 반영
     *
     * UPDATE tb_branch_customer_summary SET total_payment_price =
     * total_payment_price + ?, total_visit_count = total_visit_count + 1,
     * update_datetime = NOW() WHERE branch_no = ? AND customer_no = ?
     */
    function _updateBranchCustomerSummary() {
        var query = 'UPDATE tb_branch_customer_summary SET total_payment_price = total_payment_price + ?, total_visit_count = total_visit_count + 1, update_datetime = NOW() WHERE branch_no = ? AND customer_no = ?';
        trans.query(query, [paymentAndBenefitInfo.paymentPrice, branchBasicInfo.branchNo, customerBasicInfo.customerNo], this.async('SUMMARY_UPDATE'));
    },    /**
     *
     */
    function _insertBranchCustomerSummary() {
        if (this.data.SUMMARY_UPDATE.affectedRows < 1) {
            var query = 'INSERT INTO tb_branch_customer_summary (branch_no, customer_no, total_payment_price, total_visit_count, create_datetime, update_datetime) VALUES (?, ?, ?, 1, NOW(), NOW())';
            trans.query(query, [branchBasicInfo.branchNo, customerBasicInfo.customerNo, paymentAndBenefitInfo.paymentPrice], this.async('SUMMARY_INSERT'));
        }
    },    /**
     * 고객 등급정보 update 및 등급 히스토리 insert
     */
    function _updateBranchCustomerGrade() {
        if (customerInfo.getGradeInfo().currentGradeLevel != customerInfo.getGradeInfo().gradeLevel) {
            var query = 'UPDATE tb_branch_customer_grade SET is_active = ?, update_datetime = NOW() WHERE branch_customer_grade_no = ?';
            trans.query(query, ['N', customerInfo.getGradeInfo().branchCustomerGradeNo], this.async('CUSTOMER_GRADE_UPDATE'));
            //trans.query(query, [branchInfo.getGradeInfo()[customerInfo.getGradeInfo().gradeLevel].branchGradeNo, customerInfo.getGradeInfo()['branchCustomerGradeNo']], this.async('CUSTOMER_GRADE_UPDATE'));
        }
    },    /**
     * 고객 등급정보 insert
     */
    function _insertBranchCustomerGrade() {
        if (this.data.CUSTOMER_GRADE_UPDATE) {
            var query = 'INSERT INTO tb_branch_customer_grade (branch_grade_no, customer_no, is_active, expire_datetime, create_datetime, update_datetime) VALUES (?, ?, ?, NOW() + INTERVAL 1 YEAR, NOW(), NOW())';
            trans.query(query, [branchInfo.getGradeInfo()[customerInfo.getGradeInfo().gradeLevel].branchGradeNo, customerBasicInfo.customerNo, 'Y'], this.async('CUSTOMER_GRADE_INSERT'));
        }
    },    /**
     * 고객 등급 히스토리 insert
     */
    function _insertBranchCustomerGradeHistory() {
        if (this.data.CUSTOMER_GRADE_UPDATE) {
            var branchCustomerGradeNo = customerInfo.getGradeInfo().branchCustomerGradeNo;
            if (this.data.CUSTOMER_GRADE_INSERT) {
                branchCustomerGradeNo = this.data.CUSTOMER_GRADE_INSERT.insertId;
            }
            
            var query = 'INSERT INTO tb_branch_customer_grade_history (branch_customer_grade_no, prev_branch_grade_no, modify_type, branch_customer_payment_no, create_datetime) VALUES (?, ?, ?, ?, NOW())';
            trans.query(query, [branchCustomerGradeNo, customerInfo.getGradeInfo().branchGradeNo, "AUTO", this.data.PAYMENT.insertId], this.async('CUSTOMER_GRADE_HISTORY'));
        }
    },    /**
     * processPaymentAndUseBenefit 성공 
     */
    function _processPaymentAndUseBenefitSuccess() {
        this.data.resultCode = 'SUCCESS';
    },
    function cat(e) {
        this.data.resultCode = 'ERROR';
        self._logger.log('ERROR', 'Fail processPaymentAndUseBenefit ' + e, '(' + JSON.stringify(argument) + ')');
        
        trans.rollback();
    },
    function fin() {
        this.data.result = {
            resultCode : this.data.resultCode 
        };
        
        if (this.data.resultCode === 'SUCCESS') {
            trans.commit();
            
            this.data.result.paymentId = this.data.PAYMENT.insertId;
            this.data.result.paymentAndBenefitInfo = paymentAndBenefitInfo;
            this.data.result.targetBenefitLength = this.data.targetBenefitLength;
        }
    })(blockCallback);
    
    function blockCallback() {
        callback(this.data.result);
    }
};

/**
 * 혜택입력 처리
 *
 * @param {Object}
 *            customerInfo
 * @param {Object}
 *            branchInfo
 * @param {Object}
 *            callback
 */
CustomerDB.prototype.processGiveBenefit = function(benefitInfo, paymentId, customerInfo, branchInfo, callback) {
    var branchBasicInfo = branchInfo.getBasicInfo();
    var branchGradeCondition = branchInfo.getGradeCondition();
    
    var customerBasicInfo = customerInfo.getBasicInfo();
    var customerSummary = customerInfo.getSummary();
    var useBenefit = customerInfo.getUseBenefit();
    
    var trans = this._client.startTransaction();
    var argument = arguments;
    
    block(    /**
     * 혜택 입력
     *
     * INSERT INTO tb_branch_customer_benefit SET branch_benefit_no=?,
     * customer_no=?, branch_customer_payment_no=?, given_amount=?,
     * remain_amount=?, start_datetime=NOW(), expire_datetime=NOW() + INTERVAL 1
     * YEAR, create_datetime=NOW(), update_datetime=NOW()
     */
    function _insertBranchCustomerBenefit() {
        if (benefitInfo.friendSavingPoint > 0) {
            var query = 'INSERT INTO tb_branch_customer_benefit (branch_benefit_no, customer_no, branch_customer_payment_no, given_amount, remain_amount, start_datetime, expire_datetime, create_datetime, update_datetime) VALUES (?, ?, ?, ?, ?, NOW(), ?, NOW(), NOW())';
            //var _expire = new Date(benefitInfo.expireDate);
            
            /*
            if (benefitInfo.expireType === 'PERMANENT') {
                _expire = CommonUtil.addYears(_expire, 100);
            } else if (benefitInfo.expireType === 'DAYS_AFTER') {
                _expire = CommonUtil.addDays(_expire, benefitInfo.expireAmount);
            } else if (benefitInfo.expireType === 'WEEKS_AFTER') {
                _expire = CommonUtil.addDays(_expire, benefitInfo.expireAmount * 7);
            } else if (benefitInfo.expireType === 'MONTHS_AFTER') {
                _expire = CommonUtil.addMonths(_expire, benefitInfo.expireAmount);
            } else if (benefitInfo.expireType === 'YEARS_AFTER') {
                _expire = CommonUtil.addYears(_expire, benefitInfo.expireAmount);
            }*/
            
            var _expire = CommonUtil.toLocaleTime(CommonUtil.getExpireDate(benefitInfo.expireType, benefitInfo.expireAmount, new Date(benefitInfo.expireDate)));
            
            trans.query(query, [benefitInfo.branchBenefitNo, customerBasicInfo.customerNo, paymentId, benefitInfo.friendSavingPoint, benefitInfo.friendSavingPoint, _expire], this.async('CUSTOMER_BENEFIT'));
            trans.execute();
        }
    },    /**
     * 혜택 제공로그
     *
     * INSERT INTO tb_branch_customer_benefit_give_log (branch_customer_benefit_no, give_type, give_subject, create_datetime, update_datetime) VALUES (?, ?, ?, NOW(), NOW())
     */
    function _insertBranchCustomerBenefitLog() {
        if (benefitInfo.friendSavingPoint > 0) {
            var query = 'INSERT INTO tb_branch_customer_benefit_give_log (branch_customer_benefit_no, give_type, give_subject, create_datetime, update_datetime) VALUES (?, ?, ?, NOW(), NOW())';
            trans.query(query, [this.data.CUSTOMER_BENEFIT.insertId, 'GIVE', 'AUTO'], this.async('CUSTOMER_BENEFIT_GIVE_LOG'));
        }
    },    /**
     * 고객 등급정보 반영 (UPDATE)
     */
    function _updateBranchCustomerGrade() {
        if (customerInfo.currentGradeLevel !== customerInfo.gradeLevel) {
            var query = 'UPDATE tb_branch_customer_grade SET is_active = ?, update_datetime = NOW() WHERE branch_grade_no = ? AND customer_no = ?';
            trans.query(query, ['N', branchInfo.getGradeInfo()[customerInfo.currentGradeLevel].branchGradeNo, customerBasicInfo.customerNo], this.async('CUSTOMER_GRADE_UPDATE'));
        }
    },    /**
     * 고객 등급정보 반영 (INSERT) 
     */
    function _insertBranchCustomerGrade() {
        if (this.data.CUSTOMER_GRADE_UPDATE) {
            var query = 'INSERT INTO tb_branch_customer_grade (branch_grade_no, customer_no, is_active, expire_datetime, create_datetime, update_datetime) VALUES (?, ?, ?, NOW() + INTERVAL 1 YEAR, NOW(), NOW())';
            trans.query(query, [branchInfo.getGradeInfo()[customerInfo.gradeLevel].branchGradeNo, customerBasicInfo.customerNo, 'Y'], this.async('CUSTOMER_GRADE_INSRET'));        
        }
    },    /**
     * commit transaction
     */
    function _processGiveBenefitSuccess() {
        this.data.resultCode = 'SUCCESS';
    },
    function cat(e) {
        this.data.resultCode = 'ERROR';
        self._logger.log('ERROR', 'Fail processPaymentAndUseBenefit ' + e, '(' + JSON.stringify(argument) + ')');
        
        trans.rollback();
    },
    function fin() {
        if (this.data.resultCode === 'SUCCESS') {
            trans.commit();
        }
        
        this.data.result = {
            resultCode: this.data.resultCode
        };
    })(blockCallback);
    
    function blockCallback() {
        callback(this.data.result);
    }
};


/**
 * 고객메모 입력
 *
 * @param {Object}
 *            customerInfo
 * @param {Object}
 *            branchInfo
 * @param {Object}
 *            callback
 */
CustomerDB.prototype.processCustomerMemo = function(memoInfo, paymentId, callback) {
    var self = this;
    var trans = this._client.startTransaction();
    var argument = arguments;
    
    block(    /**
     * 혜택 입력
     *
     * INSERT INTO tb_branch_customer_memo (branch_customer_payment_no, sex, age, visit_type, create_datetime, update_datetime) VALUES (?, ?, ?, ?, NOW(), NOW())
     */
    function _insertBranchCustomerMemo() {
        var query = 'INSERT INTO tb_branch_customer_memo (branch_customer_payment_no, sex, age, visit_type, create_datetime, update_datetime) VALUES (?, ?, ?, ?, NOW(), NOW())';
        trans.query(query, [paymentId, memoInfo.sex, memoInfo.age, memoInfo.visitType], this.async('INSERT_MEMO'));
        trans.execute();
    },    /**
     * commit transaction
     */
    function _processCustomerMemoSuccess() {
        this.data.resultCode = 'SUCCESS';
    },
    function cat(e) {
        this.data.resultCode = 'ERROR';
        self._logger.log('ERROR', 'Fail processCustomerMemo ' + e, '(' + JSON.stringify(argument) + ')');

        trans.rollback();
    },
    function fin() {
        if (this.data.resultCode === 'SUCCESS') {
            trans.commit();
        }
        this.data.result = {
            resultCode: this.data.resultCode
        };
    })(blockCallback);
    
    function blockCallback() {
        callback(this.data.result);
    }
};
