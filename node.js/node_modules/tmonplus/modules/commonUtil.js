var http = require('http'),
    querystring = require('querystring'),
    crypto = require('crypto');

var CommonUtil = module.exports = {};
var CommonConstants = require('tmonplus/modules/commonConstants');

CommonUtil.JSONToString = function(object) {
    var results = [];
    for (var property in object) {
        if (object.hasOwnProperty(property)) {
            var value = object[property];
            if (value) {
                results.push(property.toString() + ': ' + value);
            }
        }
    }
                 
    return '{' + results.join(', ') + '}';
};

CommonUtil.StringToJSON = function(str) {
    return JSON.parse(str);
};

CommonUtil.byteLength = function(str) {
    if (str === null || str === "") {
        return 0;
    }
    
    var strlen = str.length;
    
    for (var i = 0, n = strlen; i < n; i++) {
        if (str.charCodeAt(i) > 0x0100) {
            strlen++;
        }
    }
    
    return strlen;
};

CommonUtil.addDays = function(targetDate, days) {
    if (days > 0) {
        return new Date(targetDate.getFullYear(), targetDate.getMonth(), targetDate.getDate() + days + 1);
    } else {
        return new Date(targetDate.getFullYear(), targetDate.getMonth(), targetDate.getDate() + days);
    } 
};

CommonUtil.addMonths = function(targetDate, months) {
    if (months > 0) {
        return new Date(targetDate.getFullYear(), targetDate.getMonth() + months, targetDate.getDate() + 1);
    } else {
        return new Date(targetDate.getFullYear(), targetDate.getMonth() + months, targetDate.getDate());
    }        
};

CommonUtil.addYears = function(targetDate, years) {
    if (years > 0) {
        return new Date(targetDate.getFullYear() + years, targetDate.getMonth(), targetDate.getDate() + 1);
    } else {
        return new Date(targetDate.getFullYear() + years, targetDate.getMonth(), targetDate.getDate());
    }
};

CommonUtil.normalizeDate = function(targetDate) {
    return new Date(targetDate.getFullYear(), targetDate.getMonth(), targetDate.getDate(), targetDate.getHours(), targetDate.getMinutes(), targetDate.getSeconds() - 1);
};

CommonUtil.tillMonths = function(targetDate, months) {
    return new Date(targetDate.getFullYear(), targetDate.getMonth() + months + 1, 1);
};

CommonUtil.tillQuarters = function(targetDate, quarters) {
    return new Date(targetDate.getFullYear(), (Math.floor(targetDate.getMonth() / 3) + quarters + 1) * 3, 1);
};

CommonUtil.tillHalfYears = function(targetDate, halfYears) {
    return new Date(targetDate.getFullYear(), (Math.floor(targetDate.getMonth() / 6) + halfYears + 1) * 6, 1);
};

CommonUtil.tillYears = function(targetDate, years) {
    return new Date(targetDate.getFullYear() + years + 1, 0, 1);
};

CommonUtil.getExpireDate = function(expireType, expireAmount, expireDate) {
    var _expire = new Date(expireDate);
            
    if (expireType === 'PERMANENT') {
        _expire = this.addYears(_expire, 100);
    } else if (expireType === 'DAYS_AFTER') {
        _expire = this.addDays(_expire, expireAmount);
    } else if (expireType === 'WEEKS_AFTER') {
        _expire = this.addDays(_expire, expireAmount * 7);
    } else if (expireType === 'MONTHS_AFTER') {
        _expire = this.addMonths(_expire, expireAmount);
    } else if (expireType === 'YEARS_AFTER') {
        _expire = this.addYears(_expire, expireAmount);
    } else if (expireType === 'TILL_MONTHS') {
        _expire = this.tillMonths(_expire, expireAmount);
    } else if (expireType === 'TILL_QUARTERS') {
        _expire = this.tillQuarters(_expire, expireAmount);
    } else if (expireType === 'TILL_HALFYEARS') {
        _expire = this.tillHalfYears(_expire, expireAmount);
    } else if (expireType === 'TILL_YEARS') {
        _expire = this.tillYears(_expire, expireAmount);
    }
    
    if (expireType != 'SPECIFIED') {
        _expire = this.normalizeDate(_expire);        
    }
    
    return _expire;
};

CommonUtil.toLocaleTime = function(targetDate) {
    var localeTime = targetDate;
    localeTime.setMinutes(localeTime.getMinutes() + localeTime.getTimezoneOffset() * -1);
    return localeTime;
};

CommonUtil.toExpireDateString = function(targetDate, fillZero) {
    return targetDate.getFullYear() > 2100 ? '' : this.toDateString(targetDate, fillZero);
};

CommonUtil.toDateString = function(targetDate, fillZero) {
    return targetDate.getFullYear() + '/' + 
        (fillZero && targetDate.getMonth() < 9 ? '0' + (targetDate.getMonth() + 1) : (targetDate.getMonth() + 1)) + '/' + 
        (fillZero && targetDate.getDate() < 10 ? '0' + targetDate.getDate() : targetDate.getDate());
};

CommonUtil.toDateMinuteString = function(targetDate, fillZero) {
    return this.toDateString(targetDate, fillZero) + ' ' + 
        (targetDate.getHours() < 10 ? '0' + targetDate.getHours() : targetDate.getHours()) + ':' + 
        (targetDate.getMinutes() < 10 ? '0' + targetDate.getMinutes() : targetDate.getMinutes());
};

CommonUtil.toDatetimeString = function(targetDate, fillZero) {
    return this.toDateMinuteString(targetDate, fillZero) + ':' +
        (targetDate.getSeconds() < 10 ? '0' + targetDate.getSeconds() : targetDate.getSeconds());
};

CommonUtil.encodeToCouponCode = function(no, digit) {
    var val = no;
    var code = '';
    var num = 5;
    var map = [52, 54, 55, 56, 57, 65, 67, 70, 72, 74, 75, 81, 82, 83, 85, 87];
    var offset = [1, 2, 1, 2, 10, 2, 3, 11, 2, 9];
    
    for (var i = 0; i < digit; i++) {
        num = i < 4 ? 5 : 16;
        code += String.fromCharCode(map[(offset[i] + val) % num]);
        val = Math.floor(val / num);
        
        if (i === digit - 1 && val > 0) {
            digit++;
        } 
    }
    
    return code;
};

CommonUtil.formatCurrency = function(num) {
    return num ? num.toString().replace(/(\d)(?=(?:\d{3})+(?!\d))/g, '$1,') : '';
};

CommonUtil.encryptText = function(plainText) {
    var cipher = crypto.createCipher('aes-256-cbc', CommonConstants.ENCRYPT_KEY);
    var cryptedText = cipher.update(plainText,'utf8','hex');
    cryptedText += cipher.final('hex');
    
    return cryptedText;
};

CommonUtil.validateSessionInfo = function(sessionInfo, remoteIP) {
    var sessionId = sessionInfo.sessionId;
    var deviceId = sessionInfo.deviceId;
    var branchNo = sessionInfo.branchNo;
    
    var cipher = crypto.createCipher('aes-256-cbc',CommonConstants.ENCRYPT_KEY);
    var plainText = deviceId + CommonConstants.DELIMITER + branchNo + CommonConstants.DELIMITER + remoteIP;
    
    var cryptedText = cipher.update(plainText,'utf8','hex');
    cryptedText += cipher.final('hex');
    
    return sessionId === cryptedText;
};
