var mysql = require('mysql');
var queues = require('mysql-queues');
var block = require('node-block').block;
var Logger = require('tmonplus/modules/logger');

/**
 *
 * @param {Object} dbConfig
 */
var BranchDB = module.exports = function(dbConfig) {
    this._initBranchDB(dbConfig);
    this._logger = new Logger('BranchDB');
};

/**
 *
 * @param {Object} dbConfig
 */
BranchDB.prototype._initBranchDB = function(dbConfig) {
    this._client = mysql.createClient(dbConfig);
    queues(this._client, true);
};

/**
 * 
 * @param {Object} callback
 */
BranchDB.prototype.endBranchDB = function(callback) {
    this._client.end(function() {
        callback();
    });
};

/**
 * 가맹점 Device 로그인
 *
 ====================================================================================
 SELECT device.branch_no
 FROM tb_branch_device device, tb_branch branch
 WHERE device.login_id = ? AND device.password = ? AND device.branch_no = branch.branch_no AND branch.`status` = 'NORMAL'
 ====================================================================================
 * @param {Object} loginInfo
 * @param {Object} callback
 */
BranchDB.prototype.checkBranchDevice = function(loginInfo, callback) {
    this._client.query('SELECT device.branch_no FROM tb_branch_device device, tb_branch branch WHERE device.login_id = ? AND device.password = ? AND device.branch_no = branch.branch_no AND branch.`status` = "NORMAL"', [loginInfo.id, loginInfo.password], function(error, results) {
        var resultCode = 'SUCCESS';
        var branchNo;
        if (error || results.length <= 0) {
            resultCode = 'ERROR';
        } else {
            branchNo = results[0].branch_no;
        }
        
        callback(resultCode, branchNo);
    });
};

BranchDB.prototype.inquiryPaymentTransactionCount = function(branchNo, callback) {
    this._client.query('SELECT COUNT(*) paymentListCount FROM tb_branch_customer_payment WHERE branch_no = ?', [branchNo], function(error, results) {
        var resultCode = 'SUCCESS';
        var paymentListCount;
        if (error || results.length <= 0) {
            resultCode = 'ERROR';
        } else {
            paymentListCount = results[0].paymentListCount;
        }
        
        callback(resultCode, paymentListCount);
    });
};

/**
 * 가맹점 최근 적립내역 리스트 조회
 *
 * SELECT payment.branch_customer_payment_no branchCustomerPaymentNo, payment.customer_no customerNo, payment.payment_price paymentPrice, payment.order_price orderPrice, payment.`status`, payment.create_datetime createDatetime, payment.update_datetime updateDatetime, summary.customer_name customerName, summary.use_point_amount usePointAmount, summary.use_benefit_amount useBenefitAmount, memo.branch_customer_memo_seq memoSeq
 * FROM tb_branch_customer_payment payment INNER JOIN tb_payment_transaction_summary summary ON (payment.branch_customer_payment_no = summary.branch_customer_payment_no AND payment.branch_no = 5)
 * LEFT OUTER JOIN tb_branch_customer_memo memo ON (payment.branch_customer_payment_no = memo.branch_customer_payment_no)
 * ORDER BY createDatetime DESC
 * LIMIT 1, 20
 *
 * @param {Object} branchNo
 * @param {Object} start
 * @param {Object} limit
 * @param {Object} callback
 */
BranchDB.prototype.inquiryPaymentTransactionInfo = function(branchNo, start, limit, callback) {
    var self = this;
    var argument = arguments;
    
    block(
    function _selectBranchCustomerPaymentList() {
        var query = 'SELECT payment.branch_customer_payment_no branchCustomerPaymentNo, payment.customer_no customerNo, payment.payment_price paymentPrice, payment.order_price orderPrice, payment.`status`, payment.create_datetime createDatetime, payment.update_datetime updateDatetime, summary.customer_name customerName, summary.use_point_amount usePointAmount, summary.use_benefit_amount useBenefitAmount, memo.branch_customer_memo_seq memoSeq ';
        query += 'FROM tb_branch_customer_payment payment INNER JOIN tb_payment_transaction_summary summary ON (payment.branch_customer_payment_no = summary.branch_customer_payment_no AND payment.branch_no = ?) ';
        query += 'LEFT OUTER JOIN tb_branch_customer_memo memo ON (payment.branch_customer_payment_no = memo.branch_customer_payment_no) ';
        query += 'ORDER BY createDatetime DESC ';
        query += 'LIMIT ?, ?';
        
        self._client.query(query, [branchNo, start, limit], this.async('BRANCH_CUSTOMER_PAYMENT_LIST'));
    },
    function _success() {
        this.data.resultCode = 'SUCCESS';
    },
    function cat(e) {
        this.data.resultCode = 'ERROR';
        self._logger.log('ERROR', 'Fail inquiryPaymentTransactionInfo ' + e, '(' + JSON.stringify(argument) + ')');
    },
    function fin() {
        this.data.result = {
            resultCode: this.data.resultCode
        };
        
        if (this.data.resultCode === 'SUCCESS') {
            this.data.result.payTransList = this.data.BRANCH_CUSTOMER_PAYMENT_LIST[0];
        }
    })(blockCallback);
    
    function blockCallback() {
        callback(this.data.result);
    }
};

/**
 * 가맹점 최근 적립내역 취소 process
 *
 * @param {Object} branchCustomerPaymentNo
 * @param {Object} branchNo
 */
BranchDB.prototype.rollbackPaymentTransaction = function(branchCustomerPaymentNo, branchNo, callback) {
    var self = this;
    var argument = arguments;
    var trans;
    
    block(    /**
     * 결제한 정보 조회
     *
     * SELECT payment.branch_customer_payment_no branchCustomerPaymentNo, payment.branch_no branchNo, payment.customer_no customerNo, payment.payment_price paymentPrice, payment.status, payment.create_datetime createDatetime, customer_phone.customer_phone customerPhone, SUBSTR(customer_phone.customer_phone, LENGTH(customer_phone.customer_phone)-3) customerName, branch.branch_name branchName
     * FROM tb_branch_customer_payment payment, tb_customer_phone customer_phone, tb_branch branch
     * WHERE payment.branch_customer_payment_no = 6 AND payment.customer_no = customer_phone.customer_no AND customer_phone.is_active = 'Y' AND payment.branch_no = branch.branch_no;
     */
    function _selectBranchCustomerPayment() {
        var query = 'SELECT payment.branch_customer_payment_no branchCustomerPaymentNo, payment.branch_no branchNo, payment.customer_no customerNo, payment.payment_price paymentPrice, payment.status, payment.create_datetime createDatetime, customer_phone.customer_phone customerPhone, SUBSTR(customer_phone.customer_phone, LENGTH(customer_phone.customer_phone)-3) customerName, branch.branch_name branchName FROM tb_branch_customer_payment payment, tb_customer_phone customer_phone, tb_branch branch WHERE payment.branch_customer_payment_no = ? AND payment.customer_no = customer_phone.customer_no AND customer_phone.is_active = "Y" AND payment.branch_no = branch.branch_no';
        self._client.query(query, [branchCustomerPaymentNo], this.async('BRANCH_CUSTOMER_PAYMENT'));
    },    /**
     * 결제취소 요청한 정보가 적절한지 판단
     * 취소상태이거나 해당 지점에서 결제한 정보가 아니면 INVALID
     */
    function _checkIsValidPaymentTransaction() {
        if (this.data.BRANCH_CUSTOMER_PAYMENT[0][0].status === 'CANCELED' || this.data.BRANCH_CUSTOMER_PAYMENT[0][0].branchNo !== branchNo) {
            this.data.resultCode = 'INVALID';
            this.end();
        }
    },    /**
     * 결제와 함께 사용한 혜택로그 조회
     *
     * SELECT branch_customer_use_log_no branchCustomerUseLogNo, branch_customer_benefit_no branchCustomerBenefitNo,
     *        branch_customer_payment_no branchCustomerPaymentNo, amount, status
     * FROM tb_branch_customer_benefit_use_log
     * WHERE branch_customer_payment_no = ?
     */
    function _selectBranchCustomerBenefitUseLog() {
        var query = 'SELECT branch_customer_benefit_use_log_no branchCustomerBenefitUseLogNo, branch_customer_benefit_no branchCustomerBenefitNo, branch_customer_payment_no branchCustomerPaymentNo, amount, status FROM tb_branch_customer_benefit_use_log WHERE branch_customer_payment_no = ?';
        self._client.query(query, [branchCustomerPaymentNo], this.async('BRANCH_CUSTOMER_BENEFIT_USE'));
    },    /**
     * 결제와 함께 지급된 혜택 정보 조회
     * 
     * SELECT give_log.branch_customer_benefit_give_log_no branchCustomerBenefitGiveLogNo
     * FROM tb_branch_customer_benefit benefit, tb_branch_customer_benefit_give_log give_log
     * WHERE benefit.branch_customer_payment_no = ? AND benefit.branch_customer_benefit_no = give_log.branch_customer_benefit_no
     */
    function _selectBranchCustomerBenefitGiveLog() {
        var query = 'SELECT give_log.branch_customer_benefit_give_log_no branchCustomerBenefitGiveLogNo FROM tb_branch_customer_benefit benefit, tb_branch_customer_benefit_give_log give_log WHERE benefit.branch_customer_payment_no = ? AND benefit.branch_customer_benefit_no = give_log.branch_customer_benefit_no';
        self._client.query(query, [branchCustomerPaymentNo], this.async('BRANCH_CUSTOMER_BENEFIT_GIVE_LOG'));
    },    /**
     * 결제와 함께 승급된 정보 조회
     * 
     * SELECT branch_customer_grade_no, prev_branch_grade_no
     * FROM tb_branch_customer_grade_history
     * WHERE branch_customer_payment_no = ?
     */
    function _selectBranchCustomerGradeHistory() {
        var query = 'SELECT history.branch_customer_grade_no branchCustomerGradeNo, history.prev_branch_grade_no prevBranchGradeNo, grade.branch_grade_no branchGradeNo, grade.customer_no customerNo FROM tb_branch_customer_grade_history history, tb_branch_customer_grade grade WHERE history.branch_customer_payment_no = ? AND history.branch_customer_grade_no = grade.branch_customer_grade_no';
        self._client.query(query, [branchCustomerPaymentNo], this.async('CUSTOMER_GRADE_HISTORY'));
    },   /**
     * 결제와 함께 지급받은 혜택정보 rollback ( remain_amount = 0 으로 업데이트 )
     *
     * UPDATE tb_branch_customer_benefit SET remain_amount = ?, update_datetime = NOW()
     * WHERE branch_customer_payment_no = ?
     */
    function _updateBranchCustomerBenefit() {
        trans = self._client.startTransaction();
        trans.query('UPDATE tb_branch_customer_benefit SET remain_amount = ?, update_datetime = NOW() WHERE branch_customer_payment_no = ?', [0, branchCustomerPaymentNo], this.async('CUSTOMER_BENEFIT_GIVED'));
        trans.execute();
    },    /**
     * 결제와 함께 지급받은 혜택로그 rollback ( give_type = 'WITHDRAW' 으로 업데이트 )
     *
     * UPDATE tb_branch_customer_benefit_give_log SET give_type = ?, update_datetime = NOW()
     * WHERE branch_customer_benefit_give_log_no = ?
     */
    function _updateBranchCustomerBenefitGiveLog() {
        var branchCustomerBenefitGiveLogList = this.data.BRANCH_CUSTOMER_BENEFIT_GIVE_LOG[0];
        for (var i = 0; i < branchCustomerBenefitGiveLogList.length; i++) {
            trans.query('UPDATE tb_branch_customer_benefit_give_log SET give_type = ?, update_datetime = NOW() WHERE branch_customer_benefit_give_log_no = ?', ['WITHDRAW', branchCustomerBenefitGiveLogList[i].branchCustomerBenefitGiveLogNo], this.async('CUSTOMER_BENEFIT_GIVE_LOG_' + branchCustomerBenefitGiveLogList[i].branchCustomerBenefitGiveLogNo));
        }
    },    /**
     * 결제와 함께 사용한 혜택정보 rollback ( remain_amount = remain_amount + (사용한 amount) 으로 업데이트 )
     *
     * UPDATE tb_branch_customer_benefit SET remain_amount = remain_amount + ?, update_datetime = NOW()
     * WHERE branch_customer_benefit_no = ?
     */
    function _updateBranchCustomerBenefit() {
        var branchCustomerBenefitUseLogList = this.data.BRANCH_CUSTOMER_BENEFIT_USE[0];
        for (var i = 0; i < branchCustomerBenefitUseLogList.length; i++) {
            trans.query('UPDATE tb_branch_customer_benefit SET remain_amount = remain_amount + ?, update_datetime = NOW() WHERE branch_customer_benefit_no = ?', [branchCustomerBenefitUseLogList[i].amount, branchCustomerBenefitUseLogList[i].branchCustomerBenefitNo], this.async('CUSTOMER_BENEFIT_USED_' + branchCustomerBenefitUseLogList[i].branchCustomerBenefitNo));
        }
    },    /**
     * 결제와 함께 사용한 혜택로그 rollback ( status = 'CANCELED' 으로 업데이트 )
     *
     * UPDATE tb_branch_customer_benefit_use_log SET status = ?, update_datetime = NOW()
     * WHERE branch_customer_benefit_use_log_no = ? 
     */
    function _updateBranchCustomerBenefitUseLog() {
        var branchCustomerBenefitUseLogList = this.data.BRANCH_CUSTOMER_BENEFIT_USE[0];
        for (var i = 0; i < branchCustomerBenefitUseLogList.length; i++) {
            trans.query('UPDATE tb_branch_customer_benefit_use_log SET status = ?, update_datetime = NOW() WHERE branch_customer_benefit_use_log_no = ?', ['CANCELED', branchCustomerBenefitUseLogList[i].branchCustomerBenefitUseLogNo], this.async('CUSTOMER_BENEFIT_USE_LOG_' + branchCustomerBenefitUseLogList[i].branchCustomerBenefitUseLogNo));
        }
    },    /**
     * 고객 등급정보 update 및 등급 히스토리 insert
     */
    function _updateBranchCustomerGrade() {
        if (this.data.CUSTOMER_GRADE_HISTORY[0].length > 0) {
            var query = 'UPDATE tb_branch_customer_grade SET is_active = ?, update_datetime = NOW() WHERE branch_customer_grade_no = ?';
            trans.query(query, ['N', this.data.CUSTOMER_GRADE_HISTORY[0][0].branchCustomerGradeNo], this.async('CUSTOMER_GRADE_UPDATE'));
        }
    },    /**
     * 고객 등급정보 insert
     */
    function _insertBranchCustomerGrade() {
        if (this.data.CUSTOMER_GRADE_UPDATE && this.data.CUSTOMER_GRADE_UPDATE.affectedRows > 0 && this.data.CUSTOMER_GRADE_HISTORY[0][0].prevBranchGradeNo > 0) {
            var query = 'INSERT INTO tb_branch_customer_grade (branch_grade_no, customer_no, is_active, expire_datetime, create_datetime, update_datetime) VALUES (?, ?, ?, NOW() + INTERVAL 1 YEAR, NOW(), NOW())';
            trans.query(query, [this.data.CUSTOMER_GRADE_HISTORY[0][0].prevBranchGradeNo, this.data.CUSTOMER_GRADE_HISTORY[0][0].customerNo, 'Y'], this.async('CUSTOMER_GRADE_INSERT'));
        }
    },    /**
     * 고객 등급 히스토리 insert
     */
    function _insertBranchCustomerGradeHistory() {
        if (this.data.CUSTOMER_GRADE_INSERT) {
            var query = 'INSERT INTO tb_branch_customer_grade_history (branch_customer_grade_no, prev_branch_grade_no, modify_type, create_datetime) VALUES (?, ?, ?, NOW())';
            trans.query(query, [this.data.CUSTOMER_GRADE_INSERT.insertId, this.data.CUSTOMER_GRADE_HISTORY[0][0].branchGradeNo, "AUTO"], this.async('CUSTOMER_GRADE_HISTORY'));
        }
    },    /**
     *
     */
    function _selectLastVisitDate() {
        var query = 'SELECT MAX(create_datetime) lastVisitDate FROM tb_branch_customer_payment WHERE customer_no = (SELECT customer_no FROM tb_branch_customer_payment WHERE branch_customer_payment_no = ?) AND branch_customer_payment_no < ? and status = "PAID"';
        trans.query(query, [branchCustomerPaymentNo, branchCustomerPaymentNo], this.async('LAST_VISIT_DATE'));
    },    /**
     * 고객 요약정보 반영
     *
     * UPDATE tb_branch_customer_summary SET total_payment_price =
     * total_payment_price + ?, total_visit_count = total_visit_count + 1,
     * update_datetime = NOW() WHERE branch_no = ? AND customer_no = ?
     */
    function _updateBranchCustomerSummary() {
        var lastVisitDate = new Date();
        
        var query = '';
        if (this.data.LAST_VISIT_DATE && this.data.LAST_VISIT_DATE[0][0].lastVisitDate != null) {
            lastVisitDate = this.data.LAST_VISIT_DATE[0][0].lastVisitDate;

            query = 'UPDATE tb_branch_customer_summary SET total_payment_price = total_payment_price - ?, total_visit_count = total_visit_count - 1, update_datetime = ? WHERE branch_no = ? AND customer_no = ?';
            trans.query(query, [this.data.BRANCH_CUSTOMER_PAYMENT[0][0].paymentPrice, lastVisitDate, branchNo, this.data.BRANCH_CUSTOMER_PAYMENT[0][0].customerNo], this.async('SUMMARY_UPDATE'));
        } else {
            query = 'UPDATE tb_branch_customer_summary SET total_payment_price = total_payment_price - ?, total_visit_count = total_visit_count - 1, update_datetime = create_datetime WHERE branch_no = ? AND customer_no = ?';
            trans.query(query, [this.data.BRANCH_CUSTOMER_PAYMENT[0][0].paymentPrice, branchNo, this.data.BRANCH_CUSTOMER_PAYMENT[0][0].customerNo], this.async('SUMMARY_UPDATE'));
        }
         
    },    /**
     * 결제정보 rollback ( status = 'CANCELED' 으로 업데이트 )
     *
     * UPDATE tb_branch_customer_payment SET status = ?, update_datetime = NOW()
     * WHERE branch_customer_payment_no = ?
     */
    function _updateBranchCustomerPayment() {
        trans.query('UPDATE tb_branch_customer_payment SET status = ?, update_datetime = NOW() WHERE branch_customer_payment_no = ?', ['CANCELED', branchCustomerPaymentNo], this.async('CUSTOMER_PAYMENT_UPDATE'));
    },
    function _rollbackPaymentTransactionSuccess() {
        this.data.resultCode = 'SUCCESS';
    },
    function cat(e) {
        trans.rollback();
        
        this.data.resultCode = 'ERROR';
        self._logger.log('ERROR', 'Fail rollbackPaymentTransaction ' + e, '(' + JSON.stringify(argument) + ')');
    },
    function fin() {
        if (this.data.resultCode === 'SUCCESS') {
            trans.commit();
        }
    })(blockCallback);
    
    function blockCallback() {
        var result = {
            RESULT_CODE: this.data.resultCode
        };
        
        if (this.data.resultCode === 'SUCCESS') {
            result.PAYMENT_INFO = this.data.BRANCH_CUSTOMER_PAYMENT[0][0];
        }
        
        callback(result);
    }
};

/**
 * 가맹점 정보조회
 *
 * @param {Object} branchNo 가맹점 번호
 * @param {Object} callback
 */
BranchDB.prototype.inquiryBranchInfo = function(branchNo, callback) {
    var self = this;
    var argument = arguments;
    
    block(    /**
     * 가맹점 기본정보 조회
     *
     * SELECT branch_no branchNo, branch_name branchName, branch_type branchType, skin_description skinDescription, skin_img_url skinImgUrl
     * FROM tb_branch branch, tb_branch_skin skin
     * WHERE branch.branch_no = ? AND branch.status = "NORMAL" AND branch.skin_no = skin.skin_no
     */
    function _selectBranchBasic() {
        self._client.query('SELECT branch_no branchNo, branch_name branchName, branch_type branchType, skin_description skinDescription, skin_img_url skinImgUrl FROM tb_branch branch, tb_branch_skin skin WHERE branch.branch_no = ? AND branch.status = "NORMAL" AND branch.skin_no = skin.skin_no', [branchNo], this.async('BASIC'));
    },    /**
     * 가맹점 정책정보 조회
     *
     * SELECT use_minimum_amount useMinimumAmount, use_each_amount useEachAmount, info_text infoText, minimum_saving_rate minimumSavingRate, IFNULL(benefit.branch_benefit_no, -1) branchBenefitNo, IFNULL(benefit.give_amount, 0) friendSavingPoint, IFNULL(benefit.expire_type, "NONE") expireType, IFNULL(benefit.expire_amount, 0) expireAmount, IF(benefit.expire_type = "SPECIFIED", benefit.specified_expire_date, NOW()) expireDate
     * FROM tb_branch branch INNER JOIN tb_branch_use_benefit_policy policy ON (branch.branch_no = policy.branch_no AND branch.branch_no = 1 AND branch.status = "NORMAL")
     * LEFT OUTER JOIN tb_branch_benefit benefit ON (policy.friend_branch_benefit_no = benefit.branch_benefit_no AND benefit.issue_status = "ACTIVE");
     */
    function _selectBranchPolicy() {
        var query = 'SELECT use_minimum_amount useMinimumAmount, use_each_amount useEachAmount, info_text infoText, minimum_saving_rate minimumSavingRate, IFNULL(benefit.branch_benefit_no, -1) branchBenefitNo, IFNULL(benefit.give_amount, 0) friendSavingPoint, IFNULL(benefit.expire_type, "NONE") expireType, IFNULL(benefit.expire_amount, 0) expireAmount, IF(benefit.expire_type = "SPECIFIED", benefit.specified_expire_date, NOW()) expireDate ';
        query += 'FROM tb_branch branch INNER JOIN tb_branch_use_benefit_policy policy ON (branch.branch_no = policy.branch_no AND branch.branch_no = ? AND branch.status = "NORMAL") LEFT OUTER JOIN tb_branch_benefit benefit ON (policy.friend_branch_benefit_no = benefit.branch_benefit_no AND benefit.issue_status = "ACTIVE")';
        
        self._client.query(query, [branchNo], this.async('POLICY'));
    },    /**
     * 가맹점 등급조건 조회
     *
     * SELECT grade.branch_grade_no branchGradeNo, grade.grade_level gradeLevel, grade.grade_name gradeName, grade.description gradeDescription,
     *        cond.branch_grade_control_condition_no branchGradeControlConditionNo,
     *        segment.branch_grade_control_condition_segment_no branchGradeControlConditionSegmentNo, segment.unit, segment.amount, segment.type, segment.base_type baseType, segment.base_amount baseAmount
     * FROM tb_branch_grade grade, tb_branch_grade_control_condition cond, tb_branch_grade_control_condition_segment segment
     * WHERE grade.branch_no = ?
     *   AND grade.branch_grade_no = cond.branch_grade_no
     *   AND cond.branch_grade_control_condition_no = segment.branch_grade_control_condition_no
     * ORDER BY gradeLevel DESC
     */
    function _selectBranchGradeCondition() {
        var query = 'SELECT grade.branch_grade_no branchGradeNo, grade.grade_level gradeLevel, grade.grade_name gradeName, grade.description gradeDescription,';
        query += ' cond.branch_grade_control_condition_no branchGradeControlConditionNo,';
        query += ' segment.branch_grade_control_condition_segment_no branchGradeControlConditionSegmentNo, segment.unit conditionUnit, segment.amount conditionAmount, segment.`type` conditionType, segment.base_type baseType, segment.base_amount baseAmount ';
        query += ' FROM tb_branch_grade grade, tb_branch_grade_control_condition cond, tb_branch_grade_control_condition_segment segment';
        query += ' WHERE grade.branch_no = ?';
        query += ' AND grade.branch_grade_no = cond.branch_grade_no';
        query += ' AND cond.branch_grade_control_condition_no = segment.branch_grade_control_condition_no';
        query += ' ORDER BY gradeLevel DESC';
        
        self._client.query(query, [branchNo], this.async('GRADE_CONDITION'));
    },    /**
     * 가맹점 혜택 지급조건 조회
     *
     * 
     * SELECT package_item_info.branch_benefit_no branchBenefitNo, branch_ben_info.resource, branch_ben_info.use_condition useCondition, branch_ben_info.name benefitName, IFNULL(branch_ben_info.`type`, "NONE") benefitType,
     *     branch_ben_info.unit benefitUnit, branch_ben_info.give_amount giveAmount, branch_ben_info.expire_type expireType, IF(branch_ben_info.expire_type = "SPECIFIED", branch_ben_info.specified_expire_date, now()) expireDate, branch_ben_info.expire_amount expireAmount,
     *     package_item_info.branch_giving_benefit_condition_no conditionNo, package_item_info.branch_benefit_package_no packageNo, package_item_info.package_name packageName,
     *     package_item_info.package_description packageDescription, package_item_info.unit conditionUnit, package_item_info.amount conditionAmount, package_item_info.`type` conditionType,
     *     package_item_info.base_type baseType, package_item_info.base_amount baseAmount
     * FROM 
     *     (
     *         SELECT package_info.branch_benefit_package_no, package_info.package_name, package_info.package_description, package_item.branch_benefit_no,
     *                package_info.branch_giving_benefit_condition_no, package_info.unit, package_info.amount, package_info.`type`, package_info.base_type, package_info.base_amount
     *         FROM
     *             (
     *                 SELECT package.branch_benefit_package_no, package.package_name, package.package_description,
     *                        cond.branch_giving_benefit_condition_no, segment.unit, segment.amount, segment.`type`, segment.base_type, segment.base_amount
     *                 FROM tb_branch_benefit_package package, tb_branch_giving_benefit_condition cond, tb_branch_giving_benefit_condition_segment segment
     *                 WHERE package.branch_no = 14 AND package.issue_status = 'ACTIVE' AND package.branch_benefit_package_no = cond.branch_benefit_package_no AND cond.branch_giving_benefit_condition_no = segment.branch_giving_benefit_condition_no
     *             ) package_info LEFT OUTER JOIN tb_branch_benefit_package_item package_item ON package_info.branch_benefit_package_no = package_item.branch_benefit_package_no
     *     ) package_item_info LEFT OUTER JOIN ( SELECT benefit.name, benefit.`type`, benefit.unit, branch_ben.use_condition, branch_ben.give_amount, branch_ben.branch_benefit_no, branch_ben.expire_type, branch_ben.specified_expire_date, branch_ben.expire_amount, branch_ben.resource FROM tb_branch_benefit branch_ben, tb_benefit benefit WHERE branch_ben.branch_no = 14 AND branch_ben.issue_status = "ACTIVE" AND branch_ben.affect_type = "IMMEDIATE" AND branch_ben.benefit_no = benefit.benefit_no ) branch_ben_info ON branch_ben_info.branch_benefit_no = package_item_info.branch_benefit_no
     * 
     */
    function _selectBranchBenefitCondition() {
        var query = 'SELECT package_item_info.branch_benefit_no branchBenefitNo, branch_ben_info.resource, branch_ben_info.use_condition useCondition, branch_ben_info.name benefitName, IFNULL(branch_ben_info.`type`, "NONE") benefitType,';
        query += ' branch_ben_info.unit benefitUnit, branch_ben_info.give_amount giveAmount, branch_ben_info.expire_type expireType, IF(branch_ben_info.expire_type = "SPECIFIED", branch_ben_info.specified_expire_date, now()) expireDate, branch_ben_info.expire_amount expireAmount,';
        query += ' package_item_info.branch_giving_benefit_condition_no conditionNo, package_item_info.branch_benefit_package_no packageNo, package_item_info.package_name packageName,';
        query += ' package_item_info.package_description packageDescription, package_item_info.unit conditionUnit, package_item_info.amount conditionAmount, package_item_info.`type` conditionType,';
        query += ' package_item_info.base_type baseType, package_item_info.base_amount baseAmount FROM (';
        query += ' SELECT package_info.branch_benefit_package_no, package_info.package_name, package_info.package_description, package_item.branch_benefit_no, package_info.branch_giving_benefit_condition_no, package_info.unit, package_info.amount, package_info.`type`, package_info.base_type, package_info.base_amount';
        query += ' FROM ( SELECT package.branch_benefit_package_no, package.package_name, package.package_description, cond.branch_giving_benefit_condition_no, segment.unit, segment.amount, segment.`type`, segment.base_type, segment.base_amount FROM tb_branch_benefit_package package, tb_branch_giving_benefit_condition cond, tb_branch_giving_benefit_condition_segment segment';
        query += ' WHERE package.branch_no = ? AND package.issue_status = "ACTIVE" AND package.branch_benefit_package_no = cond.branch_benefit_package_no AND cond.branch_giving_benefit_condition_no = segment.branch_giving_benefit_condition_no';
        query += ' ) package_info LEFT OUTER JOIN tb_branch_benefit_package_item package_item ON package_info.branch_benefit_package_no = package_item.branch_benefit_package_no';
        query += ' ) package_item_info LEFT OUTER JOIN ( SELECT benefit.name, benefit.`type`, benefit.unit, branch_ben.use_condition, branch_ben.give_amount, branch_ben.branch_benefit_no, branch_ben.expire_type, branch_ben.specified_expire_date, branch_ben.expire_amount, branch_ben.resource FROM tb_branch_benefit branch_ben, tb_benefit benefit WHERE branch_ben.branch_no = ? AND branch_ben.issue_status = "ACTIVE" AND branch_ben.affect_type = "IMMEDIATE" AND branch_ben.benefit_no = benefit.benefit_no ) branch_ben_info ON branch_ben_info.branch_benefit_no = package_item_info.branch_benefit_no';
        query += ' ORDER BY packageNo, branchBenefitNo';
        
        self._client.query(query, [branchNo, branchNo], this.async('BENEFIT_CONDITION'));
    },    /**
     * process 성공
     */
    function _inquirySucceed() {
        this.data.resultCode = 'SUCCESS';
    },
    function cat(e) {
        this.data.resultCode = 'ERROR';
        self._logger.log('ERROR', 'Fail inquiryBranchInfo ' + e, '(' + JSON.stringify(argument) + ')');
    },
    function fin() {
    })(blockCallback);
    
    function blockCallback() {
        var branchInfoDB = {
            RESULT_CODE: this.data.resultCode,
        };
        
        if (this.data.resultCode === 'SUCCESS') {
            branchInfoDB.BASIC = this.data.BASIC[0];
            branchInfoDB.POLICY = this.data.POLICY[0];
            branchInfoDB.GRADE_CONDITION = this.data.GRADE_CONDITION[0];
            branchInfoDB.BENEFIT_CONDITION = this.data.BENEFIT_CONDITION[0];
        };
        
        callback(branchInfoDB);
    }
};

/**
 * 
 * @param {Object} branchBenefitPackageNo
 */
BranchDB.prototype.insertBenefitPackageGiveLog = function(branchBenefitPackageNo) {
    var argument = arguments;
    this._client.query('INSERT INTO tb_branch_benefit_package_give_log (branch_benefit_package_no, create_datetime) VALUES (?, NOW())', [branchBenefitPackageNo], function(error, results) {
        if (error) {
            self._logger.log('ERROR', 'Fail insertBenefitPackageGiveLog ' + error, '(' + JSON.stringify(argument) + ')');
        }
    });
};

/**
 * 가맹점 device list for service monitoring
 * @param {Object} callback
 */
BranchDB.prototype.inquiryBranchDevice = function(callback) {
	this._client.query('select device.login_id from tb_branch_device device', function(err, results) {
		var resultCode = 'SUCCESS';
		if (err) {
			resultCode = 'ERROR';
		}

		callback(resultCode, results);
	});
};
