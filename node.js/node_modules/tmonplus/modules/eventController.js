/**
 * Event Controller
 * 
 * @author
 */

/**
 * EventController 생성자
 */
var EventController = module.exports = function() {
    this._eventTimeout = 8 * 1000;
    this._eventStatus = {
        'clientDeviceConnect' : { check : false, timestamp : null, params : null },
        'clientDeviceLoginRequest' : { check : false, timestamp : null, params : null },
        'initClientChannel' : { check : false, timestamp : null, params : null },
        'customerLoginRequest' : { check : true, timestamp : null, params : null },
        //'customerAgreeTerms' : { check : true, timestamp : null, params : null },
        'cancelCustomerAgreeTerms' : { check : true, timestamp : null, params : null },
        'customerStopSaving' : { check : false, timestamp : null, params : null },
        'cashierStopSaving' : { check : false, timestamp : null, params : null }, 
        'cashierRefresh' : { check : false, timestamp : null, params : null },
        'cashierInputPasswordLayerRequest' : { check : true, timestamp : null, params : null },
        'cashierInputPayAndBenefitRequest' : { check : true, timestamp : null, params : null },
        'customerNewPasswordRequest' : { check : true, timestamp : null, params : null },
        'customerInputPasswordRequest' : { check : true, timestamp : null, params : null },
        'branchPaymentTransaction' : { check : false, timestamp : null, params : null },
        'branchPaymentTransactionAppend' : { check : true, timestamp : null, params : null },
        'paymentTransactionCancelRequest' : { check : true, timestamp : null, params : null },
        'cashierInputCustomerMemo' : { check : true, timestamp : null, params : null },
        'socketUtil' : { check : false, timestamp : null, params : null },
        'socketUtil.ACK' : { check : false, timestamp : null, params : null },
        'clientDeviceReconnect' : { check : false, timestamp : null, params : null },
        'disconnect' : { check : false, timestamp : null, params : null }
    };
};

/**
 * 
 * @param {Object} eventName
 * @param {Object} timestamp
 * @param {Object} params
 */
EventController.prototype.reinitEventStatus = function(eventName, timestamp, params) {
    var eventStatus = this._getEventStatus(eventName);
    
    // event명이 존재하지 않을 경우 bypass
    if (!eventStatus) {
        return true;
    }
    
    // check 할 event가 아닐 경우 bypass
    if (!eventStatus.check) {
        return true;
    }
    
    // timestamp 차이가 8초 이내이고, params가 같으면 중복으로 판단
    if (timestamp - eventStatus.timestamp < this._eventTimeout && eventStatus.params === params) {
        return false;
    }
    
    // event status 재설정
    this._setEventStatus(eventName, timestamp, params);
    
    return true;
};

/**
 * Get Event Status
 * 
 * @param {Object} eventName
 */
EventController.prototype._getEventStatus = function(eventName) {
    if (this._eventStatus[eventName]) {
        return this._eventStatus[eventName];
    }
    
    return false;
};

/**
 * Set Event Status
 * 
 * @param {Object} eventName
 * @param {Object} status
 */
EventController.prototype._setEventStatus = function(eventName, timestamp, params) {
    if (typeof this._eventStatus[eventName] !== 'undefined') {
        this._eventStatus[eventName].timestamp = timestamp;
        this._eventStatus[eventName].params = params;
    }
};
