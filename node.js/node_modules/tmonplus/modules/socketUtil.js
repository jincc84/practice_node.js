/**
 * Socket Server Util
 * 
 * @author
 */

var EventController = require('tmonplus/modules/eventController');
var Logger = require('tmonplus/modules/logger');

/**
 * 
 * @param {Object} socket
 */
var SocketUtil = module.exports = function(socket, version) {
    this._socket = socket;
    this._eventController = new EventController();
    this._logger = new Logger('SocketUtil');
    
    this._deviceType = null;
    this._deviceId = null;
    this._version = version;
};

SocketUtil.prototype.setDevice = function(deviceType, deviceId) {
    this._deviceType = deviceType;
    this._deviceId = deviceId;
};

/**
 * 
 * @param {Object} msg
 * @param {Object} args
 */
SocketUtil.prototype.emit = function(msg, args) {
    if (this._socket) {
        this._logger.log('INFO', 'Emit ' + msg, this._socketMessage());
        this._socket.emit(msg, args);
    }
};

/**
 * 
 * @param {Object} msg
 * @param {Object} callback
 */
SocketUtil.prototype.on = function(msg, callback) {
    var self = this;
    this._socket.on(msg, function() {
        var msgPrefix = self._socketMessage();
        
        // clientDeviceReconnect 이벤트일 경우 처리
        if (msg === 'clientDeviceReconnect') {
            msgPrefix = '(id : ' + arguments[1].deviceId + ', type : ' +  arguments[1].subType + ')';
        }
        
        // initClientChannel 이벤트일 경우 처리
        if (msg === 'initClientChannel') {
            msgPrefix = '(id : ' + arguments[0].deviceId + ', type : ' +  arguments[0].subType + ')';
            
            // 버전 체크
            if (self._version !== arguments[0].version) {
                self._logger.log('WARN', 'Invalid Version (client : ' + arguments[0].version + ', server : ' + self._version + ')', msgPrefix);
            }
        }
        
        var params = JSON.stringify(arguments);
        var timestamp = (new Date()).valueOf();
        if (!self._eventController.reinitEventStatus(msg, timestamp, params)) {
            self._logger.log('INFO', 'On Duplicate ' + msg, msgPrefix);
            return;
        } 
        
        self._logger.log('INFO', 'On ' + msg, msgPrefix);

        callback.apply(self, arguments);
    });
};

SocketUtil.prototype._socketMessage = function() {
    if (this._deviceType && this._deviceId) {
        return '(id : ' + this._deviceId + ', type : ' +  this._deviceType + ')';
    }
    
    return '';
};
