/**
 * =======================================
 * Customer 정보 정의
 * =======================================
 *
 * var CustomerInfo = {
 *
 *  ...
 *
 *  this._basicInfo = {
 *      customerNo : 1,
 *      customerPhone : '01027864710',
 *      customerName : 'ticketmonster',
 *      gender : 'male',
 *      ageGroup : '20',
 *      birtyYmd : '2012.05.15'
 *  },
 *
 *  this._gradeInfo = {
 *      branchCustomerGradeNo : 1,
 *      branchGradeNo : 1,
 *      gradeLevel : 1,
 *      gradeName : 'FAMILY',
 *      gradeDescription : 'Family Grade',
 *  },
 *
 *  this._benefitInfo = [
 *      {
 *          branchBenefitNo : 1,
 *          branchCustomerBenefitNo : 1,
 *
 *          name : '포인트',
 *          type : 'SAVING',
 *          unit : 'POINT',
 *
 *          masterBranch : 100,
 *
 *          givenAmount : 1000,
 *          remainAmount : 1000,
 *
 *          startDatetime :,
 *          expireDatetime :,
 *
 *          useAmount : 500
 *      },
 *      {
 *          branchBenefitNo : 2,
 *          branchCustomerBenefitNo : 1,
 *
 *          name : '쿠폰',
 *          type : 'COUPON',
 *          unit : 'NUMBER',
 *
 *          masterBranch : 100,
 *
 *          givenAmount : 1,
 *          remainAmount : 1,
 *
 *          startDatetime :,
 *          expireDatetime :,
 *
 *          useAmount : 1
 *      }
 *  ],
 *
 *  this._summary = {
 *      totalPaymentPrice : 100000,
 *      totalVisitCount : 10,
 *
 *      customerPhone : '01027864710',
 *      customerName : 'ticketmonster',
 *
 *      totalGivenPoint : 1000,
 *
 *      savingAmount : 1000
 *  }
 *}
 *
 */
var CommonUtil = require('tmonplus/modules/commonUtil');

/**
 * CustomerInfo 생성자
 */
var CustomerInfo = module.exports = function() {
    this._initialized = false;
    this._basicInfo = {};
    this._gradeInfo = {};
    this._benefitInfo = [];
    this._summary = {};
    this._useBenefit = [];
    this._couponInfo = [];
    this._paymentInfo = [];
    this._receptionRefusalInfo = {};
};

/**
 *
 * @param {Object} customerInfoDB
 */
CustomerInfo.prototype.initialize = function(customerInfoDB, branchBenefitUseCondition, branchGradeInfo) {
    this.initBasicInfo(customerInfoDB.BASIC[0]);
    this.initGradeInfo(customerInfoDB.GRADE[0], branchGradeInfo);
    this.initBenefitInfo(customerInfoDB.BENEFIT);
    this.initSummary(customerInfoDB.SUMMARY[0], branchBenefitUseCondition);
    this.initPaymentInfo(customerInfoDB.PAYMENT);
    this.initReceptionRefusalInfo(customerInfoDB.RECEPTION_REFUSAL[0]);
    
    this._initialized = true;
};


/**
 *
 * @param {Object} customerInfoDB
 */
CustomerInfo.prototype.initializeFrom = function(pCustomerInfo) {
    if (pCustomerInfo) {
        this._basicInfo = pCustomerInfo.basicInfo;
        this._gradeInfo = pCustomerInfo.gradeInfo;
        this.initBenefitInfo(pCustomerInfo.benefitInfo);
        this._summary = pCustomerInfo.summary;
        this._paymentInfo = pCustomerInfo.paymentInfo;
        this._receptionRefusalInfo = pCustomerInfo.receptionRefusalInfo;
        this._initialized = true;
    }
};

/**
 *
 * @param {Object} customerInfoDB
 */
CustomerInfo.prototype.signUp = function(signUpInfo, branchBenefitUseCondition, branchGradeInfo) {
    this.initBasicInfo(null, signUpInfo);
    this.initGradeInfo(null, branchGradeInfo);
    this.initBenefitInfo(null);
    this.initSummary(null, branchBenefitUseCondition);
    this.initPaymentInfo(null);
    this.initReceptionRefusalInfo(null);
};
/**
 *
 * @param {Object} branchInfo
 */
CustomerInfo.prototype.initBasicInfo = function(basicInfo, signUpInfo) {
    if (basicInfo) {
        this._basicInfo = basicInfo;
    } else {
        this._basicInfo = {
            customerNo: '',
            customerPhone: '',
            customerName: '',
            gender: '',
            ageGroup: '',
            birthYmd: ''
        };
        
        if (signUpInfo) {
            this._basicInfo.customerNo = signUpInfo.customerNo;
            this._basicInfo.customerPhone = signUpInfo.customerPhone;
            this._basicInfo.customerName = signUpInfo.customerPhone.substring(signUpInfo.customerPhone.length - 4);
        }
    }
};

/**
 *
 * @param {Object} gradeInfo
 */
CustomerInfo.prototype.initGradeInfo = function(gradeInfo, branchGradeInfo) {
    if (gradeInfo) {
        this._gradeInfo = gradeInfo;
    } else {
        this._gradeInfo = {
            branchCustomerGradeNo: '',
            branchGradeNo: null,
            currentGradeLevel: 0,
            gradeLevel: 1,
            gradeName: '',
            gradeDescription: ''
        };
    }
    if (branchGradeInfo) {
        if (!this._gradeInfo.gradeLevel) {
            this._gradeInfo.gradeLevel = 1;
        }
        
        this._gradeInfo.gradeName = branchGradeInfo[this._gradeInfo.gradeLevel] ? branchGradeInfo[this._gradeInfo.gradeLevel].gradeName : "";
        this._gradeInfo.gradeDescription = branchGradeInfo[this._gradeInfo.gradeLevel] ? branchGradeInfo[this._gradeInfo.gradeLevel].gradeDescription : "";
    }
};

/**
 *
 * @param {Object} benefitInfo
 */
CustomerInfo.prototype.initBenefitInfo = function(benefitInfo) {
    if (benefitInfo) {
        this._benefitInfo = benefitInfo;
        this._couponInfo = [];
        
        for (var i = 0, n = benefitInfo.length; i < n; i++) {
            if (this._benefitInfo[i].type === 'COUPON') {
                this._benefitInfo[i].uniqueCode = this._benefitInfo[i].branchBenefitNo;
                this._benefitInfo[i].couponNo = CommonUtil.encodeToCouponCode(this._benefitInfo[i].branchCustomerBenefitNo, 10);
                this._couponInfo.push(benefitInfo[i]);
            }
        }
    } else {
        this._benefitInfo = [];
        this._couponInfo = [];
    }
    
    this._useBenefit = [];
};

/**
 *
 * @param {Object} summary
 */
CustomerInfo.prototype.initSummary = function(summary, branchBenefitUseCondition) {
    if (summary) {
        this._summary = summary;
    } else {
        this._summary = {
            totalPaymentPrice: 0,
            totalVisitCount: 0,
            lastVisitDays: 0
        };
    }
    
    // 전체 포인트 설정
    this._summary.totalGivenPoint = 0;
    
    for (var i = 0; i < this._benefitInfo.length; i++) {
        if (this._benefitInfo[i].type === 'SAVING') {
            this._summary.totalGivenPoint += this._benefitInfo[i].remainAmount;
        }
    }
    
    // 사용 가능한 포인트 설정
    this._summary.totalUsablePoint = 0;
    this._summary.savingAmount = 0;
    this._summary.useMinimumAmount = 0;
    this._summary.useEachAmount = 0;
    
    if (branchBenefitUseCondition) {
        this._summary.totalUsablePoint = this._calculateUsablePoint(this._summary.totalGivenPoint, branchBenefitUseCondition.useMinimumAmount, branchBenefitUseCondition.useEachAmount, this._summary.totalGivenPoint, this._summary.totalGivenPoint);
        this._summary.useMinimumAmount = branchBenefitUseCondition.useMinimumAmount;
        this._summary.useEachAmount = branchBenefitUseCondition.useEachAmount;
    }
};

/**
 *
 * @param {Object} paymentInfo
 */
CustomerInfo.prototype.initPaymentInfo = function(paymentInfo) {
    if (paymentInfo) {
        this._paymentInfo = paymentInfo;
    } else {
        this._paymentInfo = [];
    }
};

/**
 *
 * @param {Object} paymentInfo
 */
CustomerInfo.prototype.initReceptionRefusalInfo = function(receptionRefusalInfo) {
    if (receptionRefusalInfo) {
        this._receptionRefusalInfo = receptionRefusalInfo;
    } else {
        this._receptionRefusalInfo = {'sms': 0, 'email': 0};
    }
};

/**
 *
 * @param {Object} promotionGrade
 */
CustomerInfo.prototype.setPromotionGrade = function(promotionGrade) {
    this._gradeInfo.gradeLevel = promotionGrade.gradeLevel;
    this._gradeInfo.gradeName = promotionGrade.gradeName;
    this._gradeInfo.gradeDescription = promotionGrade.gradeDescription;
};

/**
 * 포인트/혜택 사용처리
 *
 * @param {Object} pPaymentAndBenefitInfo 포인트사용정보
 * @param {Object} branchBenefitUseCondition 포인트사용조건
 */
CustomerInfo.prototype.processUse = function(pPaymentAndBenefitInfo, branchBenefitUseCondition) {
    var customerUseBenefitInfo = pPaymentAndBenefitInfo.useBenefits;
    var usableAmount = this._calculateUsablePoint(pPaymentAndBenefitInfo.usePoint, branchBenefitUseCondition.useMinimumAmount, branchBenefitUseCondition.useEachAmount, pPaymentAndBenefitInfo.orderPrice, this._summary.totalUsablePoint);
    
    // 포인트 사용처리
    var totalUseSavePoint = this._applyUseSavePoint(usableAmount);
    if (usableAmount > 0 && usableAmount !== totalUseSavePoint) {
        console.log('[LOG] CustomerInfo.processUseBenefit :: usableAmount != totalUseSavePoint : ' + usableAmount + ', ' + totalUseSavePoint);
    } 
    
    // 혜택 사용처리
    var totalUseBenefit = 0;
    
    for (var i = 0; i < this._benefitInfo.length; i++) {
        if (this._benefitInfo[i].type === 'SAVING' || !(this._benefitInfo[i].branchCustomerBenefitNo in customerUseBenefitInfo && customerUseBenefitInfo[this._benefitInfo[i].branchCustomerBenefitNo])) {
            continue;
        } 
        
        this._applyUseBenefit(this._benefitInfo[i]);
        
        if (this._benefitInfo[i].unit === 'POINT') {
            totalUseBenefit += this._benefitInfo[i].givenAmount;
        } else if (this._benefitInfo[i].unit === 'PERCENTAGE') {
            totalUseBenefit += Math.floor(pPaymentAndBenefitInfo.orderPrice * this._benefitInfo[i].givenAmount);
        }
    }
    
    return {
        totalUseSavePoint: totalUseSavePoint,
        totalUseBenefit: totalUseBenefit
    };
};


/**
 *
 * @param {Object} targetPrice 결제대상금액(=주문금액에서 포인트/혜택 사용금액을 제외한 금액)
 * @param {Object} branchBenefitGiveCondition
 */
CustomerInfo.prototype.processSaving = function(targetPrice, branchBenefitGiveCondition) {
    if (branchBenefitGiveCondition && targetPrice > 0) {
        for (var i = 0; i < branchBenefitGiveCondition.length; i++) {
            if (branchBenefitGiveCondition[i].conditionUnit === 'GRADE' && branchBenefitGiveCondition[i].conditionAmount === this._gradeInfo.gradeLevel) {
                return {
                    savingAmount: Math.floor((branchBenefitGiveCondition[i].benefitUnit === 'PERCENTAGE' ? targetPrice : 1) * branchBenefitGiveCondition[i].giveAmount),
                    branchBenefitNo: branchBenefitGiveCondition[i].branchBenefitNo,
                    expireType: branchBenefitGiveCondition[i].expireType,
                    expireDate: branchBenefitGiveCondition[i].expireDate,
                    expireAmount: branchBenefitGiveCondition[i].expireAmount
                };
            }
        }
    }
    
    return {
        savingAmount: 0,
        branchBenefitNo: -1
    };
};

/**
 * 적립포인트 사용처리
 *
 * @param {Object} pointAmount 사용 포인트
 */
CustomerInfo.prototype._applyUseSavePoint = function(pointAmount) {
    if (pointAmount === 0 || this._benefitInfo.length < 1) {
        return 0;
    }
    
    var applyPoint = pointAmount;
    
    var index = 0;
    do {
    
        if (this._benefitInfo[index].type === 'SAVING') {
            var useBenefit = {};
            
            useBenefit.branchCustomerBenefitNo = this._benefitInfo[index].branchCustomerBenefitNo;
            useBenefit.useAmount = this._benefitInfo[index].remainAmount < applyPoint ? this._benefitInfo[index].remainAmount : applyPoint;
            applyPoint -= useBenefit.useAmount;
            
            this._useBenefit.push(useBenefit);
        }
        
        index++;
        
    } while (applyPoint > 0 && this._benefitInfo.length > index);
    
    return pointAmount - applyPoint;
};

/**
 * 혜택 사용처리
 *
 * @param {Object} useBenefitInfo
 */
CustomerInfo.prototype._applyUseBenefit = function(useBenefitInfo) {
    var useBenefit = {};
    useBenefit.branchCustomerBenefitNo = useBenefitInfo.branchCustomerBenefitNo;
    useBenefit.useAmount = useBenefitInfo.givenAmount;
    
    this._useBenefit.push(useBenefit);
};

/**
 * 사용 가능한 포인트 계산
 *
 * @param {Object} useRequestAmount
 * @param {Object} orderPrice
 * @param {Object} totalUsableAmount
 * @param {Object} useMinimumAmount
 * @param {Object} useEachAmount
 */
CustomerInfo.prototype._calculateUsablePoint = function(useRequestAmount, useMinimumAmount, useEachAmount, orderPrice, totalUsableAmount) {
    if (useRequestAmount < useMinimumAmount) {
        return 0;
    }
    
    if (orderPrice && useRequestAmount > totalUsableAmount) {
        return 0;
    }
    
    if (totalUsableAmount && useRequestAmount > totalUsableAmount) {
        return 0;
    }
    
    if (useEachAmount > 0) {
        return Math.floor(useRequestAmount / useEachAmount) * useEachAmount;
    }
    
    return useRequestAmount;
};

/**
 * Get basicInfo
 */
CustomerInfo.prototype.getBasicInfo = function() {
    return this._basicInfo;
};

/**
 * Get gradeInfo
 */
CustomerInfo.prototype.getGradeInfo = function() {
    return this._gradeInfo;
};

/**
 * Get object
 */
CustomerInfo.prototype.getObject = function(isFull) {
    var object = {
        basicInfo: this._basicInfo,
        gradeInfo: this._gradeInfo,
        benefitInfo: [],
        couponInfo: [],
        summary: this._summary,
        paymentInfo: [],
        receptionRefusalInfo: this._receptionRefusalInfo
    };
    
    if (isFull) {
        object.benefitInfo = this._benefitInfo;
        object.couponInfo = this._couponInfo;
        object.paymentInfo = this._paymentInfo;
    }
    
    return object;
};

/**
 * Get object
 */
CustomerInfo.prototype.getUseBenefit = function() {
    return this._useBenefit;
};

/**
 * Get summary
 */
CustomerInfo.prototype.getSummary = function() {
    return this._summary;
};

/**
 * Get reception refusal
 */
CustomerInfo.prototype.getReceptionRefusalInfo = function() {
    return this._receptionRefusalInfo;
};

/**
 * Get gradeInfo
 */
CustomerInfo.prototype.getGradeLevel = function() {
    return this._gradeInfo.gradeLevel;
};

/**
 * Get total visit count
 */
CustomerInfo.prototype.getTotalVisitCount = function() {
    return this._summary.totalVisitCount;
};

/**
 * 
 */
CustomerInfo.prototype.initialized = function() {
    return this._initialized;
};


/**
 *
 * @param {Object} gradeCondition
 */
CustomerInfo.prototype.getVisitCountByCondition = function(pCondition) {
    var baseType = pCondition.baseType;
    var baseAmount = pCondition.baseAmount;
    
    if (baseType === null || baseType === undefined || baseType === 'PERMANENT') {
        return this._summary.totalVisitCount + 1;
    }
    
    if (baseAmount === null || baseAmount === undefined || baseAmount <= 0) {
        return 1;
    }
    
    var baseDate = new Date();
    
    if (baseType === 'DAY') {
        baseDate = CommonUtil.addDays(baseDate, baseAmount * -1);
    } else if (baseType === 'MONTH') {
        baseDate = CommonUtil.addMonths(baseDate, baseAmount * -1);
    } else if (baseType === 'YEAR') {
        baseDate = CommonUtil.addYears(baseDate, baseAmount * -1);
    }
    
    var visitCount = 0;
    
    for (var i = 0, l = this._paymentInfo.length; i < l; i++) {
        var visitDate = new Date(this._paymentInfo[i].createDatetime);
        if (baseDate <= visitDate) {
            visitCount++;
        }
    }
    
    return visitCount + 1;
};

/**
 * get total payment price
 */
CustomerInfo.prototype.getTotalPaymentPrice = function() {
    return this._summary.totalPaymentPrice;
};

/**
 *
 * @param {Object} pCondition
 * @param {Object} paymentPrice
 */
CustomerInfo.prototype.getPaymentPriceByCondition = function(pCondition, paymentPrice) {
    var baseType = pCondition.baseType;
    var baseAmount = pCondition.baseAmount;
    
    if (baseType === null || baseType === undefined || baseType === 'PERMANENT') {
        return this.getTotalPaymentPrice() + paymentPrice;
    }
    
    if (baseAmount === null || baseAmount === undefined || baseAmount <= 0) {
        return paymentPrice;
    }
    
    var baseDate = new Date();
    
    if (baseType === 'DAY') {
        baseDate = CommonUtil.addDays(baseDate, baseAmount * -1);
    } else if (baseType === 'MONTH') {
        baseDate = CommonUtil.addMonths(baseDate, baseAmount * -1);
    } else if (baseType === 'YEAR') {
        baseDate = CommonUtil.addYears(baseDate, baseAmount * -1);
    }
    
    var totalPaymentPrice = 0;
    
    for (var i = 0, l = this._paymentInfo.length; i < l; i++) {
        var visitDate = new Date(this._paymentInfo[i].createDatetime);
        if (baseDate <= visitDate) {
            totalPaymentPrice += this._paymentInfo[i].paymentPrice;
        }
    }
    
    return totalPaymentPrice + paymentPrice;
};
