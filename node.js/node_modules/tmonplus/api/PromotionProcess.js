/**
 * TmonPlus Promotion Process
 * 
 * @author  
 */

var util = require('util');
var events = require('events');

var CommonUtil = require('tmonplus/modules/commonUtil');
var Logger = require('tmonplus/modules/logger');

var CustomerDB = require('tmonplus/modules/customerDB');
var BranchDB = require('tmonplus/modules/branchDB');
var PromotionDB = require('tmonplus/modules/promotionDB');

var CustomerInfo = require('tmonplus/modules/customerInfo');

var smsUtil = require('tmonplus/modules/smsUtil');

/**
 * Socket
 */
var PromotionProcess = module.exports = function(phase) {
    events.EventEmitter.call(this);
    
    this._phase = phase;

    this._dbConfig = require('../../../config/dbConfig');
    this._conf = require('../../../config/setup');
    if (this._phase !== 'real') {
        var path = '../../../config/' + this._phase + '/dbConfig';
        this._dbConfig = require('../../../config/' + this._phase + '/dbConfig');
    }
    
    this._customerDB = new CustomerDB(this._dbConfig);
    this._branchDB = new BranchDB(this._dbConfig);
    this._promotionDB = new PromotionDB(this._dbConfig);
    this._sms = new smsUtil(this._dbConfig);
    
    this._logger = new Logger('PromotionProcess');
    
    this._scheduleNo = undefined;
    this._promotion = undefined;
    this._benefit = undefined;
    this._promotionTargetList = undefined;
    
    this._targetCount = 0;
    this._processedTargetCount = 0;
    this._processingTargetIndex = 0;
    
    this._branchInfo = undefined;
};

util.inherits(PromotionProcess, events.EventEmitter);

PromotionProcess.prototype.initialize = function(scheduleNo) {
    this._scheduleNo = scheduleNo;
    
    this.on('promotionStart', this._promotionStart);
    
    this.on('inquiryScheduleInfo', this._inquiryScheduleInfo.bind(this));
    
    this.on('processPromotion', this._processPromotion.bind(this));
    this.on('checkProcess', this._checkProcess.bind(this));
    
    this.on('giveBenefit', this._giveBenefit.bind(this));
    this.on('nonmember', this._nonmember.bind(this));
    this.on('refusal', this._refusal.bind(this));
    
    this.on('promotionEnd', this._promotionEnd.bind(this));
};

/**
 * Process Promotion
 */
PromotionProcess.prototype.process = function() {
    this._logger.log('INFO', 'process', '(scheduleNo : ' + this._scheduleNo + ')');
    
    var self = this;
    this._promotionDB.inquiryPromotionInfo(this._scheduleNo, function(resultCode, promotionInfo) {
        if (resultCode && resultCode === 'SUCCESS') {
            self._promotion = promotionInfo;
            self.emit('promotionStart');
        } else {
            self._logger.log('ERROR', 'inquiryPromotionInfo', '(scheduleNo : ' + self._scheduleNo + ')');
            self.emit('promotionEnd');
        }
    });
};

/**
 * Start Promotion Process
 */
PromotionProcess.prototype._promotionStart = function() {
    this._logger.log('INFO', 'promotion start', '(scheduleNo : ' + this._scheduleNo + ')');
    
    var self = this;
    this._promotionDB.updatePromotionScheduleStatus(this._scheduleNo, 'WORKING', function(resultCode) {
        if (resultCode && resultCode === 'SUCCESS') {
            self.emit('inquiryScheduleInfo');
        } else {
            self._logger.log('ERROR', 'updatePromotionScheduleStatus', '(scheduleNo : ' + self._scheduleNo + ', status : WORKING)');
            self.emit('promotionEnd');
        }
    });
};

/**
 * End Promotion Process
 */
PromotionProcess.prototype._promotionEnd = function() {
    this._logger.log('INFO', 'promotion end', '(scheduleNo : ' + this._scheduleNo + ')');
    
    var self = this;
    this._promotionDB.updatePromotionScheduleStatus(this._scheduleNo, 'COMPLETE', function(resultCode) {
        if (resultCode && resultCode === 'SUCCESS') {
            self._promotionDB.endPromotionDB(function() {
                self._logger.log('INFO', 'PromotionDB end');
            });
            self._branchDB.endBranchDB(function() {
                self._logger.log('INFO', 'BranchDB end');
            });
            self._customerDB.endCustomerDB(function() {
                self._logger.log('INFO', 'CustomerDB end');
            });
        } else {
            self._logger.log('ERROR', 'updatePromotionScheduleStatus', '(scheduleNo : ' + self._scheduleNo + ', status : COMPLETE)');
            self.emit('promotionEnd');
        }
    });
};

/**
 * Inquiry Schedule Info
 */
PromotionProcess.prototype._inquiryScheduleInfo = function() {
    this._logger.log('INFO', 'inquiry scheduleInfo', '(scheduleNo : ' + this._scheduleNo + ')');
    
    var self = this;
    this._promotionDB.inquiryScheduleInfo(this._promotion, function(result) {
        if (result && result.resultCode === 'SUCCESS') {
            self._benefit = self._generateCustomerBenefit(result.benefitList);
            self._promotionTargetList = result.targetList;
            self._targetCount = self._promotionTargetList.length;
            
            self.emit('processPromotion');
        } else {
            self._logger.log('ERROR', 'inquieryScheduleInfo', '(scheduleNo : ' + self._scheduleNo + ')');
            self.emit('promotionEnd');
        }
    });
};

/**
 * Processing Promotion
 */
PromotionProcess.prototype._processPromotion = function() {
    this._logger.log('INFO', 'process promotion', '(scheduleNo : ' + this._scheduleNo + ')');

    if (this._targetCount < 1) {
        this.emit('promotionEnd');
        return;
    }
    
    this.emit('checkProcess');
};

/**
 * Check Promotion Process
 */
PromotionProcess.prototype._checkProcess = function() {
    if (this._processedTargetCount < this._targetCount) {
        this._processTarget(this._promotionTargetList[this._processingTargetIndex]);
    } else {
        this.emit('promotionEnd');
    }
};

/**
 * Process for Single Target Customer
 * 
 * @param {Object} promotionTarget
 */
PromotionProcess.prototype._processTarget = function(promotionTarget) {
    var self = this;
    
    var customerInfo = new CustomerInfo();
    var pCustomerInfo = {
        'branchNo' : this._promotion.branchNo,
        'customerPhone' : promotionTarget.customerPhone
    };
    
    this._customerDB.inquiryCustomerInfo(pCustomerInfo, function(result) {
        if (result && result.RESULT_CODE === 'SUCCESS') {
            // Customer Info 초기화
            customerInfo.initialize(result);
            if (customerInfo.getReceptionRefusalInfo()['sms'] > 0) {
                self.emit('refusal');
            } else {
                self.emit('giveBenefit', customerInfo);
            }
        } else if (result && result.RESULT_CODE === 'NONMEMBER') {
            self.emit('nonmember');
        } else {
            // ERROR
            self._modifyPromotionTargetStatus(promotionTarget.branchGivingBenefitScheduleTargetNo, 'FAIL:ERR');
        }
    });
};

/**
 * Give Benefit to Target Customer
 */
PromotionProcess.prototype._giveBenefit = function(customerInfo) {
    var promotionTarget = this._promotionTargetList[this._processingTargetIndex];
    
    this._logger.log('INFO', 'Giving Benefit', '(scheduleNo : ' + this._scheduleNo + ', targetNo : ' + promotionTarget.branchGivingBenefitScheduleTargetNo + ')');

    var self = this;
    
    if (this._benefit.length > 0) {
        this._promotionDB.processGivingBenefit(promotionTarget, this._benefit, function(result) {
            if (result && result.resultCode === 'SUCCESS') {
                // LMS 발송
                var message = self._generatePromotionMessage(result.customerBenefitNos, customerInfo);
                self._sms.sendSMS(customerInfo.getBasicInfo().customerPhone, '15661135', self._promotion.branchName, message, 'now', 'lms', (customerInfo.getReceptionRefusalInfo()['sms'] > 0), {"branchNo": self._promotion.branchNo, "contentsType": "MANUAL_PROMOTION", "triggerInfo": self._promotion.branchBenefitPackageNo});
                self._branchDB.insertBenefitPackageGiveLog(self._promotion.branchBenefitPackageNo);
                
                self._modifyPromotionTargetStatus(promotionTarget.branchGivingBenefitScheduleTargetNo, 'ISSUE');
            } else {
                self._modifyPromotionTargetStatus(promotionTarget.branchGivingBenefitScheduleTargetNo, 'FAIL:ERR');
            }
        });
    } else {
        var message = self._generatePromotionMessage([], customerInfo);
        self._sms.sendSMS(customerInfo.getBasicInfo().customerPhone, '15661135', self._promotion.branchName, message, 'now', 'lms', (customerInfo.getReceptionRefusalInfo()['sms'] > 0), {"branchNo": self._promotion.branchNo, "contentsType": "MANUAL_PROMOTION", "triggerInfo": self._promotion.branchBenefitPackageNo});
        self._branchDB.insertBenefitPackageGiveLog(self._promotion.branchBenefitPackageNo);
        
        self._modifyPromotionTargetStatus(promotionTarget.branchGivingBenefitScheduleTargetNo, 'ISSUE');
    }
};

/**
 * Nonmember
 */
PromotionProcess.prototype._nonmember = function() {
    var promotionTarget = this._promotionTargetList[this._processingTargetIndex];
     
    this._logger.log('INFO', 'Nonmember', '(scheduleNo : ' + this._scheduleNo + ', targetNo : ' + promotionTarget.branchGivingBenefitScheduleTargetNo + ')');
    this._modifyPromotionTargetStatus(promotionTarget.branchGivingBenefitScheduleTargetNo, 'FAIL:NON');
};

/**
 * Refusal Member
 */
PromotionProcess.prototype._refusal = function() {
    var promotionTarget = this._promotionTargetList[this._processingTargetIndex]
    
    this._logger.log('INFO', 'Refusal', '(scheduleNo : ' + this._scheduleNo + ', targetNo : ' + promotionTarget.branchGivingBenefitScheduleTargetNo + ')');
    this._modifyPromotionTargetStatus(promotionTarget.branchGivingBenefitScheduleTargetNo, 'FAIL:REF');
};

/**
 * Generate CustomerBenefit from BranchBenefit
 * 
 * @param {Object} branchBenefitList
 */
PromotionProcess.prototype._generateCustomerBenefit = function(branchBenefitList) {
    var customerBenefitList = [];
    for (var i = 0, l = branchBenefitList.length; i < l; i++) {
        var _expire = CommonUtil.toLocaleTime(CommonUtil.getExpireDate(branchBenefitList[i].expireType, branchBenefitList[i].expireAmount, new Date(branchBenefitList[i].expireDate)));
        var customerBenefit = {
            'branchBenefitNo' : branchBenefitList[i].branchBenefitNo,
            'giveAmount' : branchBenefitList[i].giveAmount,
            'resource' : branchBenefitList[i].resource,
            'useCondition' : branchBenefitList[i].useCondition,
            'expire' : _expire
        }
        customerBenefitList.push(customerBenefit);
    }
    
    return customerBenefitList;
};

/**
 * Modify Promotion Target Status
 * 
 * @param {Object} scheduleTargetNo
 * @param {Object} status
 */
PromotionProcess.prototype._modifyPromotionTargetStatus = function(scheduleTargetNo, status) {
    var self = this;
    this._promotionDB.updatePromotionTargetStatus(scheduleTargetNo, status, function(resultCode) {
        if (resultCode === 'ERROR') {
            self._logger.log('ERROR', 'Fail updatePromotionTargetStatus', ' (branch_giving_benefit_schedule_target_no : ' + scheduleTargetNo + ', status : ' + status + ')');
        }
        
        self._processedTargetCount++;
        self._processingTargetIndex++;
        self.emit('checkProcess');
    });
};

/**
 * Generate Promotion LMS Message
 * 
 * @param {Object} customerBenefitNos
 * @param {Object} customerInfo
 */
PromotionProcess.prototype._generatePromotionMessage = function(customerBenefitNos, customerInfo) {
    var _customerName = customerInfo.getBasicInfo().customerPhone.substr(customerInfo.getBasicInfo().customerPhone.length - 4);                    
    var _customerGrade = customerInfo.getGradeInfo().gradeName;
    var _totalGivenPoint = customerInfo.getSummary().totalGivenPoint;
    
    var message = '[' + this._promotion.branchName + '] ';
    message += this._promotion.packageDescription
                  .replace(/\[:customerName:\]/g, _customerName)
                  .replace(/\[:customerGrade:\]/g, _customerGrade)
                  .replace(/\[:totalGivenPoint:\]/g, CommonUtil.formatCurrency(_totalGivenPoint));

    var benefitMessage = '';
    for (var i = 0, l = this._benefit.length; i < l; i++) {
        var item = this._benefit[i];
        
        var strExpireDate = CommonUtil.toExpireDateString(item.expire);
        
        if (this._benefit.length > 1) {
            benefitMessage += '쿠폰(' + (i+1) + ')\n';
        }
        
        benefitMessage += '━━━━━━━━━━━\n';
        benefitMessage += item.resource + '\n';
        benefitMessage += '━━━━━━━━━━━\n';
        benefitMessage += '- 인증번호' + CommonUtil.encodeToCouponCode(customerBenefitNos[item.branchBenefitNo], 10) + '\n';
        benefitMessage += '- ' + (strExpireDate === '' ? '유효기간없음\n' : strExpireDate + '까지\n');
        if (item.useCondition) {
            benefitMessage += '- ' + item.useCondition + '\n'; 
        } 
        if (i + 1 < l) {
            benefitMessage += '\n';
        }
    }
    
    message = message.replace('[:branchBenefits:]', benefitMessage);
    message += '\n\n혜택거부0808000264\n티몬플러스에서 알려드립니다';
    
    return message;
};